/*High Contrast Mode : This adds div element to body, with background-image style, "when high contrast mode is on (windows o.s, mozilla firefox browser), background image style becomes none", we use this to detect high contrast mode */
(function(j$){
	var newDiv = document.createElement("div");
	newDiv.style = "width: 0px; height: 0px; background-image: url('#')";
	document.body.appendChild(newDiv);
	newDiv.setAttribute("class", "high-contrast-test"); 
})(jQuery);

/*This looks for background-image style if its none set the TVAPP.isHighContrastOn to 1, this can be accessed across the application */
function isHighContrastOn(){
	if (j$('.high-contrast-test').css('background-image') === 'none') {
		TVAPP.isHighContrastOn = 1;
		loadHighcontrastcss();
	} else {
		TVAPP.isHighContrastOn = 0;
	}
}

/*In highcontrast mode adds highcontrast.css*/
function loadHighcontrastcss(){
	var fileref=document.createElement("link");
	fileref.setAttribute("rel", "stylesheet");
	fileref.setAttribute("type", "text/css");
	fileref.setAttribute("href", '/styles/utils/highcontrast.css');
	document.body.appendChild(fileref);
}

/*On window load check for highcontrast mode */
j$(window).on('load',function(){
	isHighContrastOn();
});
//j$(window).load();

(function(j$){
	TVAPP.first_time = true;
	TVAPP.inRegistrationProcess = false;
	TVAPP.nextAction = null;
	TVAPP.currForm = {id:"", validated:false};
	TVAPP.short_url = null;

	TVAPP.namespace = function (ns_string) {
		var parts = ns_string.split(".");
		var parent = TVAPP;
		var i;

		// strip redundant leading global
		if (parts[0] === "TVAPP") {
			parts = parts.slice(1);
		}

		for (i = 0; i < parts.length; i += 1) {
			// create a property if it doesn't exist
			if (typeof parent[parts[i]] === "undefined") {
				parent[parts[i]] = {};
			}
			parent = parent[parts[i]];
		}
		return parent;
	};

 	TVAPP.getQueryStringParams = function(name) {
		name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
		var regexS = "[\\?&]"+name+"=([^&#]*)";
		var regex = new RegExp( regexS );
		var results = regex.exec( window.location.href );
		if (results == null) {return "";}
		else {return decodeURIComponent(results[1].replace(/\+/g, " "));}
	};

	TVAPP.readCookie = function(name) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for(var i=0;i < ca.length;i++) {
			var c = ca[i];
			while (c.charAt(0)==' ') c = c.substring(1,c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
		}
		return null;
	};

	TVAPP.createCookie = function(name,value,days) {
		if (days) {
			var date = new Date();
			date.setTime(date.getTime()+(days*24*60*60*1000));
			var expires = "; expires="+date.toGMTString();
		}
		else var expires = "";
		document.cookie = name+"="+value+expires+"; path=/";
	};

	TVAPP.deleteCookie = function(name) {
		TVAPP.createCookie(name,"",-1);
	};

	if (TVAPP.readCookie("redirect_url")) {
		window.location = TVAPP.readCookie("redirect_url");
		TVAPP.deleteCookie("redirect_url");
	}

	TVAPP.openWindow = function(event,btn){
		event.preventDefault();
		if(!TVAPP.isEmpty(btn)) {
			event.currentTarget = btn;
		}
		var href = event.currentTarget.href;

		j$(document).trigger("trackPage", { url: href});

		if (href.indexOf("email") >= 0) { return false;	}
		if (event.currentTarget.target != "tether" && event.currentTarget.target != "follow") { return false; }

		var w, h;
		if (event.currentTarget.target == "tether") {
			if (href.indexOf("facebook") >= 0) { w=790; h=480; };
			if (href.indexOf("linkedin") >= 0) { w=790; h=410; };
			if (href.indexOf("twitter") >= 0) { w=790; h=410; };
			if (href.indexOf("weibo") >= 0) { w=790; h=410; };
		} else if(event.currentTarget.target == "follow") {
			if (href.indexOf("twitter") >= 0) { w=500; h=510; };
		}

		var currWinX = (document.all) ? window.screenLeft : window.screenX;
		var currWinY = (document.all) ? window.screenTop : window.screenY;
		currWinX += 20;
		currWinY += 100;
		window.open(
			href, "tether", "width="+ w +", height="+ h +", toolbar=no, resizable=yes, "+
			"location=no, directories=no, status=no, menubar=no, copyhistory=no, " +
			"left="+ currWinX +", top="+ currWinY +", screenX="+ currWinX +", screenY="+ currWinY
		);
		return false;
	};
	/*
	if(TVAPP.readCookie('areYouEmp')=="true"){//When there is a cookie set to true
		j$("#key_login_hldr").show();
		j$("#key_login_hldr_emp").hide();
	}else if(TVAPP.readCookie('areYouEmp')=="false"){//When there is a cookie set to false
		j$("#key_login_hldr").hide();
		j$("#key_login_hldr_emp").show();
	}else{// First time visiting the page
		j$("#key_login_hldr_emp").show();
	}
	*/
	TVAPP.readlocalStorageElement = function(name) {
		var tvapp =JSON.parse(localStorage.getItem('TVAPP'));
		if(tvapp==null){
			return null;
		}else{
			return tvapp[name];
		}
	};

	TVAPP.createlocalStorageElement = function(name,value) {
		var tvapp = JSON.parse(localStorage.getItem('TVAPP'));
		if(tvapp == null){
			tvapp = {}

		}	
		tvapp[name]=value;	
		localStorage.setItem('TVAPP', JSON.stringify(tvapp));
	};

	
	//var tvapp = JSON.parse(localStorage.getItem('TVAPP'));
	if(TVAPP.readlocalStorageElement('isEmp')=='true'){
		j$("#key_login_hldr").show();
		j$("#key_login_hldr_emp").hide();
	}else if(TVAPP.readlocalStorageElement('isEmp')=='false'){
		j$("#key_login_hldr").hide();
		j$("#key_login_hldr_emp").show();
	}else{
		j$("#key_login_hldr_emp").show();
	}

	TVAPP.chosenPostProcessor = function(elements) { // pass jquery object(s) only
		elements.each(function(idx, $thisSelect){
			var $ChosenSelector = j$(this);
			$ChosenSelector.css({display:"block", position:"absolute", visiblity: "hidden"});

			var $ChosenContainer = j$(this).next();
			
			if(j$($ChosenContainer).hasClass('chzn-container')) {
				$ChosenContainer.find('.chzn-drop ul').attr({
					'role' : 'listbox',
					'aria-expanded' : false,
					'aria-hidden' : true,
					'id': '' + $ChosenContainer.attr('id') + '_items'
				});
				$ChosenContainer.find('.chzn-drop ul li').attr({
					'role' : 'option'
				});
				$ChosenContainer.find('.chzn-choices input').attr({
					'role': 'combobox',
					//'aria-label' : $ChosenContainer.find('.chzn-choices input').val(),
					'aria-autocomplete' : 'list',
					'aria-owns' :  $ChosenContainer.find('.chzn-drop ul').attr('id'),
					'aria-activedescendant': $ChosenContainer.find('.chzn-drop ul').attr('id')
				});
				$ChosenContainer.find('.chzn-search input').attr({
					'role' : 'combobox',
					'aria-autocomplete' : 'list',
					'aria-owns' :  $ChosenContainer.find('.chzn-drop ul').attr('id')
				});
				$ChosenContainer.bind("keyup click", function() {
					$ChosenSelector.trigger("keyup");;
				});
				var ariaLabelText = '';
				var dropDownAriaText = '';
				if(j$($ChosenContainer).hasClass('chzn-container-multi')) {
					if(typeof $ChosenContainer.attr('aria-label') == 'undefined' || !($ChosenContainer.attr('aria-label').length)) {
						dropDownAriaText = (typeof j$(this).attr('data-dropdowntype') != 'undefined') ? j$(this).attr('data-dropdowntype') : "";
						ariaLabelText = dropDownAriaText + ' ' + TVAPP.smDict('global.msg.noOptionsSelected');
						$ChosenContainer.attr({'aria-label' : ariaLabelText});
					}
				} else if(j$($ChosenContainer).hasClass('chzn-container-single')){
					dropDownAriaText = (typeof j$(this).attr('data-dropdowntype') != 'undefined') ? j$(this).attr('data-dropdowntype') : "";
					if ($ChosenContainer.find('.chzn-results li.result-selected').html() === TVAPP.smDict('global.selectone')) {
						ariaLabelText = dropDownAriaText + ' ' + TVAPP.smDict('Chosen.placeholder_single');
					} else {
						ariaLabelText = dropDownAriaText + ' ' + TVAPP.smDict('global.msg.selectedOption') + ' ' + $ChosenContainer.find('.chzn-results li.result-selected').text();
					}
					$ChosenContainer.attr({'aria-label' : ariaLabelText});
					$ChosenContainer.find('.chzn-search input').attr({'aria-label' : ariaLabelText});
				}
				if (j$(".register_email").length>0 || j$(".register_finish").length>0) {
					var containerId = j$($ChosenContainer).attr('id');
					if(j$($ChosenContainer).parent().has('#label_'+containerId).length === 0) {
						j$($ChosenContainer).parent().append('<span id=label_'+containerId +' style="display:none">'+ariaLabelText+'</span>');
					}
					j$($ChosenContainer).attr({'aria-labelledby':'label_'+containerId + ' error_label_'+containerId});
					j$($ChosenContainer).removeAttr('aria-label');
					j$($ChosenContainer).find('.chzn-search input').attr({'aria-labelledby':'label_'+containerId + ' error_label_'+containerId});
					j$($ChosenContainer).find('.chzn-search input').removeAttr('aria-label');
				}
			}
		});
		
		elements.on('liszt:showing_dropdown', function(evt, params){
			j$(this).next().find('.chzn-drop ul').attr({
				'aria-expanded' : true,
				'aria-hidden' : false
			});
		});
		
		elements.on('liszt:hiding_dropdown', function(evt, params){
			j$(this).next().find('.chzn-drop ul').attr({
				'aria-expanded' : false,
				'aria-hidden' : true
			});
			j$(this).next().find('.search-choice').each(function(i,el){
				var opt_text = j$(el).find('span').text();
				j$(el).attr({
					'aria-selected' : true
				}).find('.search-choice-close').attr({
					'role' : 'button',
					'aria-label' : TVAPP.smDict('global.deselect') + ' - ' + opt_text
				});
			});
		});
		
		elements.on('liszt:change', function(){
			j$(this).next().find('.chzn-search input, .chzn-choices input').attr({
				'aria-activedescendant': j$(this).next().find('.chzn-drop ul li:first').attr('id')
			});
		});
	}
	
	/* Debugging
	 * New & improved, thanks to cpatik - http://patik.com/blog/complete-cross-browser-console-log/
	 * */

	// Tell IE9 to use its built-in console
	if (Function.prototype.bind && (typeof console === 'object' || typeof console === 'function') && typeof console.log === 'object') {
	  ['log', 'info', 'warn', 'error', 'assert', 'dir', 'clear', 'profile', 'profileEnd']
		.forEach(function(method) {
		  console[method] = this.call(console[method], console);
		}, Function.prototype.bind);
	}

	j$.log = function() {
		j$.log.history = j$.log.history || []; // Store logs to an array for reference
		j$.log.history.push(arguments);

		// Modern browsers
		if (typeof console != 'undefined' && typeof console.log == 'function') {
			// Single argument, which is a string
			if ((Array.prototype.slice.call(arguments)).length === 1 && typeof Array.prototype.slice.call(arguments)[0] === 'string') {
				console.log((Array.prototype.slice.call(arguments)).toString());
			} else {
				console.log(Array.prototype.slice.call(arguments));
			}
		}

		// IE8
		else if (!Function.prototype.bind && typeof console !== 'undefined' && typeof console.log === 'object') {
			Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));
		}

		// Others
		else {
			//alert(arguments);
		}
	}

	j$.log('LOGGING ACTIVATED');



	TVAPP.smDict = function(tag) {
		return TVAPP.dict[tag] || tag;
	}

	TVAPP.smProperty = function(property) {
		var propertyLoc = "#" + property.replace(/\./g, "\\."); // escape periods
		var prop = j$("#jProperty").find(propertyLoc);
		// if (tag.length > 0)  ... else return dictTag;
		return prop.first().text();
	};

	TVAPP.pluralize = function(tag_name, pl_num1, pl_num2, callback) {
		var data = {};
		data.tag_name = tag_name;
		data.pl_num1 = pl_num1;
		if (typeof pl_num2 !== 'undefined' && pl_num2 !== null) data.pl_num2 = pl_num2;
		j$.ajax({
			url: TVAPP.guid('/ajax/dict/lookup-value-plural'),
			data: data,
			dataType: 'json',
			success: function(data, textStatus, xhr) {
				callback(data);
			},
			error: function(xhr, textStatus,error) {
				TVAPP.masterErrorHandler(xhr, textStatus, error, null);
			}
		});
	}

	TVAPP.none_one_many = function(number, when_none, when_one, when_many) {
		if (number==0) {
			return when_none.replace(/\#\#number\#\#/gi, number);
		} else if (number==1) {
			return when_one.replace(/\#\#number\#\#/gi, number);
		} else {
			return when_many.replace(/\#\#number\#\#/gi, number);
		}
	};

	j$.fn.digits = function(){
		return this.each(function(){
			j$(this).text( j$(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") );
		});
	};

	TVAPP.searchText = function(searchEl, fakeText) {

		var realText;

		if (j$(searchEl).val() == "" || j$(searchEl).val() == fakeText) {
			j$(searchEl).addClass("grey_out").val(fakeText);
		}

		j$(searchEl).focus(
			function () {
				if(j$(searchEl).hasClass("grey_out")) {
					j$(searchEl).val("").removeClass("grey_out");
					realText=true;
				}
			}
		);

		j$(searchEl).blur(
			function () {
				if(j$(searchEl).val()=="") {
					j$(searchEl).val(fakeText).addClass("grey_out");
					realText=false;
				}
			}
		);
	};

	// Animation delay (usage: j$("element").delay(3000))
	j$.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue( type, function() {
			var elem = this;
			setTimeout(function() {
				jQuery.dequeue( elem, type );
			}, time );
		});
	};

	TVAPP.G_ContentRepoJS = {};

	TVAPP.isEmpty = function(s) {
		return s==null || s==undefined || s.length==0;
	};

	// usage(1): TVAPP.smLoadContent("refer-content-definition", "Job.id=3402"); - load
	// content by the input context.
	// usage(2): TVAPP.smLoadContent("refer-content-definition"); - load content specified
	// by the definition's context.
	TVAPP.smLoadContent = function(contentId, contentContext) {
		var contentDefinition = j$("#contentRepository #"+contentId);

		if (TVAPP.isEmpty(contentDefinition)) {
			j$.log("Error: TVAPP.smLoadContent: Can not load content \"" + contentId + "\". Please define it (or only define it once) in the ContentRepository area.");
			return "";
		}

		if (!TVAPP.isEmpty(contentContext)) {
			// usage(1) Custom context overrides default and requires update of content
			return TVAPP.makeCacheLoadJS(contentId, contentDefinition, contentContext);

		} else {
			// usage(2) Default context is used and the default value can be used
			var defaultContainerContext = contentDefinition.attr("context");
			var defaultHTML = contentDefinition.html();

			if (!TVAPP.isEmpty(defaultHTML)) {
				// cache the default.
				var repositoryKey = contentId+"|"+defaultContainerContext;
				TVAPP.G_ContentRepoJS[repositoryKey] = defaultHTML;

				// remove from definition to avoid duplicate ID/CLASS elements
				contentDefinition.html("");

				j$.log("Loading " + contentId + " from defintion");
				return defaultHTML;
			} else {
				return TVAPP.makeCacheLoadJS(contentId, contentDefinition, defaultContainerContext);
			}

		}
	};

	TVAPP.makeCacheLoadJS = function(contentId, contentDefinition, contentContext) {
		var data = {};
		var repositoryKey = contentId+"|"+contentContext;

		var ccHTML = TVAPP.G_ContentRepoJS[repositoryKey];
		if (ccHTML == null || ccHTML.length == 0) {
			j$.log("SMCache: Load from server: " + contentId );
			// load content from the server
			data.path = contentDefinition.attr("path");
			data.template = contentDefinition.attr("template");
			data.context = contentContext;
			ccHTML = TVAPP.ajaxIncludeContent(data);

			// cache it in the container
			TVAPP.G_ContentRepoJS[repositoryKey] = ccHTML;
		}
		else {
			j$.log("SMCache: Load from cache: " + contentId );
		}

		return ccHTML;
	};

	// This is similar to TVAPP.smLoadContent except that it always goes to get the content from the server
	// and never caches anything.
	TVAPP.smLoadContentFromServer = function(contentId, contentContext) {
		var data = {};
		var contentDefinition = j$("#contentRepository #"+contentId);
		if (TVAPP.isEmpty(contentDefinition)) {
			j$.log("Error: TVAPP.smLoadContentFromServer: Can not load content \"" + contentId + "\". Please define it (or only define it once) in the ContentRepository area.");
			return "";
		}

		data.path = contentDefinition.attr("path");
		data.template = contentDefinition.attr("template");
		data.context = contentDefinition.attr("context");
		if(!TVAPP.isEmpty(contentContext)) {
			data.context += "&" + contentContext
		}

		ccHTML = TVAPP.ajaxIncludeContent(data);
		return ccHTML;
	}


	TVAPP.ajaxIncludeContent = function(data) { // data must include path || template and can also include context and job_id
		data = data || {};
		var defaults = {
				async:false,
				success: function(){}
			},
			settings = j$.extend({}, defaults, data),
			url,
			loadedContent = '';

		var isIncludeContent = true;
		
		if(TVAPP.property.site_cookie_acceptance == 'modal' && ( !(TVAPP.readCookie('Cookie-Accept') && TVAPP.readCookie('Cookie-Accept').split('|').indexOf(TVAPP.property.site.id) != -1) )) {
			isIncludeContent = false;
			url = "";		
		}
		var dataParams;
		
		if(!TVAPP.isEmpty(settings.context)) {
			dataParams = TVAPP.queryStringToParams(settings.context);
		}
		
		if (!TVAPP.isEmpty(settings.job_id) && !TVAPP.isEmpty(settings.template)) {
			url = "/ajax/content/" + settings.job_id + "/" + settings.template;
		} else if (!TVAPP.isEmpty(settings.path)) {
			url = settings.path;
		} else if (!TVAPP.isEmpty(settings.template) && isIncludeContent) {
			url = "/ajax/content/" + settings.template;
		} else {
			j$.log("ERROR: ajaxIncludeContent: please specify a content 'template' or 'path'. Data: " + JSON.stringify(settings));
		}

		if(url.length > 0) {
			j$.ajax({
				type: 'POST',
				url: TVAPP.guid(url),
				dataType: 'json',
				data: dataParams,
				success: function(data, textStatus, xhr) {
					loadedContent = j$.trim(data.Result);
					settings.success(loadedContent, settings);
				},
				error: function(xhr, textStatus,error) {
					TVAPP.masterErrorHandler(xhr, textStatus, error, null);
				},
				async: settings.async
			});
		}
		if (!settings.async) return loadedContent;

	};
	
	//convert querystring into data content
	TVAPP.queryStringToParams = function(queryParam) {
		var pairs = queryParam.split('&');
		
		var result = {};
		pairs.forEach(function(pair) {
			pair = pair.split('=');
			result[pair[0]] = decodeURIComponent(pair[1] || '');
		});
		return result;
	};

	TVAPP.trapFocusToMenuItems = function(popoverObj) {
		var contentBlock;
		// To handle popover and modal
		if(popoverObj.$element) {
			contentBlock = popoverObj.$element.next();
		} else {
			contentBlock = popoverObj;
		}
		var items = contentBlock.find('a, button');
		
		j$(contentBlock).unbind('keydown').bind('keydown', function(event){
			if (event.keyCode == 9 && event.shiftKey) {
				if (document.activeElement == items[0]) {
					event.preventDefault();
					j$(items[items.length - 1]).focus();
				}
			} else if(event.keyCode == 9) {
				if (document.activeElement == items[items.length -1]) {
					event.preventDefault();
					j$(items[0]).focus();
				}
			}
		});
	};
		
	TVAPP.isMaxLength = function(obj){
		var mlength = j$(obj).attr("maxlength") > -1  ? parseInt(j$(obj).attr("maxlength")) : 2000;
		if (obj.value.length > mlength) {
			j$.log("maxlength of \"" + j$(obj).attr("name") + "\" textarea: " + mlength);
			j$.log("# of characters you typed: " + obj.value.length)
			obj.value = obj.value.substring(0,mlength);
			j$("body").modal({
				"text": "You have reached the maximum number of characters allowed for this field."
			});
		}
	};

	TVAPP.guid = function(url) {
		var date = new Date
		var uid = date.getMilliseconds();

		var additionType = "?uid=";

		for (var i = 0; i < url.length; i++) {
			if(url.charAt(i) == '?') {
				additionType = "&uid="
			}
		}

		var newURL = url + additionType + uid;

		return newURL;
	};

	TVAPP.browserDetect = {
		init: function(){
			this.browser = this.searchString(this.dataBrowser)||"An unknown browser";
			this.version = this.searchVersion(navigator.userAgent)||this.searchVersion(navigator.appVersion)||"an unknown version";
			this.OS = this.searchString(this.dataOS) || "an unknown OS";
		},
		searchString: function(data){
			for(var i=0;i<data.length;i++) {
				var dataString=data[i].string;
				var dataProp=data[i].prop;
				this.versionSearchString = data[i].versionSearch || data[i].identity;
				if (dataString) {
					if (dataString.indexOf(data[i].subString)!=-1) return data[i].identity;
				} else if (dataProp) return data[i].identity;
			}

		},
		searchVersion: function(dataString){
			var index=dataString.indexOf(this.versionSearchString);
			if(index==-1)return;
			return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
		},
		dataBrowser:[
			{string:navigator.userAgent,subString:"Chrome",identity:"Chrome"},
			{string:navigator.userAgent,subString:"OmniWeb",versionSearch:"OmniWeb/",identity:"OmniWeb"},
			{string:navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},
			{prop:window.opera,identity:"Opera"},
			{string:navigator.vendor,subString:"iCab",identity:"iCab"},
			{string:navigator.vendor,subString:"KDE",identity:"Konqueror"},
			{string:navigator.userAgent,subString:"Firefox",identity:"Firefox"},
			{string:navigator.vendor,subString:"Camino",identity:"Camino"},
			{string:navigator.userAgent,subString:"Netscape",identity:"Netscape"},
			{string:navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},
			{string:navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},
			{string:navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}
		],
		dataOS:[
			{string:navigator.platform,subString:"Win",identity:"Windows"},
			{string:navigator.platform,subString:"Mac",identity:"Mac"},
			{string:navigator.userAgent,subString:"iPhone",identity:"iPhone/iPod"},
			{string:navigator.platform,subString:"Linux",identity:"Linux"}
		]
	};
	TVAPP.getInternetExplorerVersion = function() {

		// Returns the version of Windows Internet Explorer or a -1
		// (indicating the use of another browser).
	   var rv = -1; // Return value assumes failure.
	   if (navigator.appName == 'Microsoft Internet Explorer')
	   {
		  var ua = navigator.userAgent;
		  var re  = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
		  if (re.exec(ua) != null)
			 rv = parseFloat( RegExp.$1 );
	   }
	   return rv;
	};

	TVAPP.browserVer = function(){
		var iever = TVAPP.getInternetExplorerVersion()

		if (iever != -1) {
			window.ie = true;
			if (iever >= 9.0) {
				window.ie9 = true;
			}
			else if (iever >= 8.0) {
				window.ie8 = true;
			}
			else if (iever >= 7.0) {
				window.ie7 = true;
			}
			else {
				window.ie6 = true;
			}
		}
		else {
			if (document.childNodes && !document.all && !navigator.taintEnabled) {
				window.webkit = window[window.xpath ? "webkit420" : "webkit419"] = true;
			}
			else {
				if (document.getBoxObjectFor != null || window.mozInnerScreenX != null) {
					window.gecko = true;
				}
			}
		}
	};

	TVAPP.changeToXXX = function(elem) {
		var len = j$(elem).val().length;
		var xword = '';
		for (var i=0; i<len; i++) xword += '*';
		j$(elem).val(xword);
	};

	TVAPP.masterErrorHandler = function(xhr, textStatus, error, errorHandler, options) {

		var handled = false;
		if (j$.isFunction(errorHandler)) {
			handled = errorHandler(xhr, textStatus, error, options);
		}

		if (handled == null || !handled) {
			TVAPP.defaultErrorHandler(xhr, textStatus, error, options);
		}
	};

	// Turn off Master Error Handler when the document and its resources are about to be unloaded (ie. navigating away while waiting for AJAX response)
	j$(window).bind('beforeunload', function () {
		TVAPP.masterErrorHandler = function(){};
	});

	// Default handler: show error in a popup error modal
	TVAPP.defaultErrorHandler = function(xhr, textStatus, error, options) {
		j$(".search_bubble").remove();
		j$("#overlay").hide();
		j$.log("Remote call failed.  Status: " + xhr.status + " error: " + error);
		var message;
		try {
			if(xhr.status==0){
				message = 'you are offline or the server is currently unavailable.';
			}
			else if(xhr.status==400){
				var result = JSON.parse(xhr.responseText);
				if (result.Errors.GENERIC_ERROR_STRING == "Invalid Login") {
					message = 'Login unsuccessful. Your username and/or password was not valid.';
				} else {
					message = result.Errors.GENERIC_ERROR_STRING;
				}
			}
			else if(xhr.status==401){
				message = 'Authentication required.  Please log in.';
				// TODO: go to the login screen.
			}
			else if(xhr.status==403){
				message = 'Access Denied';
			}
			else if(xhr.status==404){
				message = 'Requested url not found.';
			}
			else if(xhr.status==500){
				var result = JSON.parse(xhr.responseText);
				message = result.UserMessage;
				//message = 'Server Error. See logs for more information';
				j$.log("Error\n"+result.Errors.GENERIC_ERROR_STRING);
			}
			else if(xhr.status==503) {
				message = 'Server Temporarily Unavailable.  Please try again later.';
			}
			else if(textStatus=='parsererror'){
				message = 'Error parsing json request.';
			}
			else if(textStatus=='timeout'){
				message = 'The request timed out.';
			}
			else {
				message = 'Error code ('+xhr.status+'): ' + xhr.responseText;
			}
		}
		catch (err) {
			if (parseInt(TVAPP.smProperty('ShowModule.ContactUs.Email'))) {
				message = 'Very sorry, but there was a system error. Please contact <a href="mailto:' + TVAPP.smDict('ContactUs.Email') + '">' + TVAPP.smDict('ContactUs.Email') + '</a> for assistance.';
			} else {
				message = 'Very sorry, but there was a system error. Please contact your HR department for assistance.';
			}

			j$.log("Error in error handling: " + err.message);
		}
		j$.log(message);

		var escapeHTML= function (taintedHTMLString) {
			return taintedHTMLString.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
		}


		var settings = {"text":escapeHTML(message)};

		if (options) {
			j$.extend(settings,options);
		}
		j$("body").modal(settings);
	};

	TVAPP.masterSuccessHandler = function(data, textStatus, xhr, successHandler, errorHandler) {
		// handle offline or server down.  jquery treats this as a success.
		if (xhr.status == 0) {
			TVAPP.masterErrorHandler(xhr, "No Connectivity (SM)", "", errorHandler);
		}
		else {
			j$.log("Remote call succeeded.");
			document.cookie = "jobs_searched=true;path=/";
			successHandler(data, textStatus, xhr);
		}
	}

	TVAPP.defaultSuccessHandler = function(data, textStatus, xhr) {
		j$.log("Handled remote call success.");
	};

	// Generic method to post to the server.
	// post_data is an array of form input elements
	TVAPP.smPost = function(url, post_data, onSuccess, onError) {
		var successHandler = j$.isFunction(onSuccess) ? onSuccess : TVAPP.defaultSuccessHandler;
		var errorHandler = onError;
		j$.ajax({
			type: "POST",
			url: TVAPP.guid(url),
			data: post_data,
			dataType: "json",
			success: function(data, textStatus, xhr) { TVAPP.masterSuccessHandler(data, textStatus, xhr, successHandler, errorHandler);},
			error: function(xhr, textStatus, error) { TVAPP.masterErrorHandler(xhr, textStatus, error, errorHandler); }
		});
	};

	TVAPP.passwordRequirementsTooltip = function(passwordField, toolTipIcon, form) {
		initErrorPane();
		var updatePasswordErrors = function(reset){
			if(reset) {
				initErrorPane();
			} else {
				passwordStrengthErrors(passwordField.val());
			}
			var error_string_html = createErrorStringHtml();
			j$("#password_criteria",form).html(error_string_html);
			error_string_html = j$(error_string_html).attr('id', 'password_typed_tooltip').attr('role', 'tooltip')[0].outerHTML;
			toolTipIcon.attr("data-content", error_string_html);
		};
		updatePasswordErrors(); // run immediately

		toolTipIcon.clickover({
			placement:'top',
			title:"password_pops",
			html: true,
			animation: false,
			onShown: function() { updatePasswordErrors(true); }
		});

		passwordField
			.focus(function() {
				updatePasswordErrors();
				setTimeout(function(){
					if (j$("#password_criteria .passwordError", form).length) {
						toolTipIcon.clickover('show');
					}
				}, 200);
			})
			.blur(function() {
				updatePasswordErrors(true);
				setTimeout(function(){
					if (j$(".password_pops:visible", form).length) {
						toolTipIcon.clickover('forcehide');
					}
				}, 100);
			})
			.keyup(function() {
				updatePasswordErrors();
				if (j$(".password_pops:visible", form).length) {
					if (j$("#password_criteria .passwordError",form).length) {
						toolTipIcon.clickover('show');
					}
					else {
						toolTipIcon.clickover('forcehide');
					}
				} else if (j$("#password_criteria .passwordError", form).length) {
					toolTipIcon.clickover('show');
				}
			});
	};

	TVAPP.googleToolbarFixForIE = function(){ // Google Toolbar Fix for IE (gets rid of those ugly yellow input fields)
		var	restoreStyles = function(){
			if(event.srcElement.style.backgroundColor != "")
				event.srcElement.style.backgroundColor = "";
		};
		var inputList = document.getElementsByTagName("INPUT");
		for(i=0;i<inputList.length;i++){
			inputList[i].attachEvent("onpropertychange",restoreStyles);
			inputList[i].style.backgroundColor = "";
		}
		var selectList = document.getElementsByTagName("SELECT");
		for(i=0;i<selectList.length;i++){
			selectList[i].attachEvent("onpropertychange",restoreStyles);
			selectList[i].style.backgroundColor = "";
		}
	};

	// Set up validation with spikes and fades, etc.
	j$.validator.setDefaults({
		errorPlacement: function(label, element) {
			(j$.browser.msie ? label.insertAfter(element).hide().show().parents(".input_holder:first").find("label").addClass("hidden_label")
				: label.insertAfter(element).hide().fadeIn("slow").parents(".input_holder:first").find("label").addClass("hidden_label"));
		},
		showErrors: function(errorMap, errorList) {
			for ( var i = 0; this.errorList[i]; i++ ) {
				var error = this.errorList[i];
				this.settings.highlight && this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				this.showLabel( error.element, error.message );
				if(j$(".register_email").length>0 || j$(".register_finish").length>0) {
					if(j$(error.element).hasClass('jChosen') || j$(error.element).parent().has('.jChosen').length > 0) {
						var chosenContainerId = j$(error.element).parent().find('.chzn-container').attr('id');
						var errorLabel = 'error_label_'+chosenContainerId;
						j$(error.element).parent().find('div.error').attr({'id':errorLabel});
					} else {
						j$(error.element).parent().find('div.error').attr({'id':'error_label_'+(error.element).id});
					}
				}
			}

			if( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if (this.settings.success) {
				for ( var i = 0; this.successList[i]; i++ ) {
					this.showLabel( this.successList[i] );
				}
			}
			if (this.settings.unhighlight) {
				for ( var i = 0, elements = this.validElements(); elements[i]; i++ ) {
					this.settings.unhighlight.call( this, elements[i], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();

			//Changes to default for spike and fadeIn
			this.toShow.append('<div class="spike">');
			if (j$.browser.msie) {this.addWrapper( this.toShow ).show();}
			else {this.addWrapper( this.toShow ).fadeIn("slow");}
		}
	});

	j$.validator.addMethod("emails", function(value, element) {
		if (this.optional(element)) {return true;}
		var emails = value.split( new RegExp( "\\s*[;,]\\s*", "gi" ) );
		valid = true;
		for(var i in emails) {
			value = emails[i];
			valid=valid && j$.validator.methods.email.call(this, value,element);
		}
		return valid;
	});

	j$.validator.addMethod("passwordStrength", function(value, element) {
		if (this.optional(element)) {return true;}
		var valid = !(passwordStrengthErrors(value));
		j$.validator.messages.passwordStrength = createErrorStringHtml();
		return valid;
	});

	j$.validator.addMethod("passwordStrengthTray", function(value, element) {
		if (this.optional(element)) {return true;}
		var valid = !(passwordStrengthErrors(value));
		j$("#password_criteria").html(createErrorStringHtml());
		//j$.validator.messages.passwordStrength = createErrorStringHtml();
		return valid;
	});

	j$.validator.addMethod("greaterThan",
	function(value, element, params) {

		if (!/Invalid|NaN/.test(new Date(value))) {
			return new Date(value) > new Date(j$(params).val());
		}

		return isNaN(value) && isNaN($(params).val())
			|| (parseFloat(value) > parseFloat(j$(params).val()));
	},'Must be greater than {0}.');

	/* Datepicker Validation 1.0.1 for jQuery UI Datepicker 1.8.6.
	   Requires Jörn Zaefferer's Validation plugin (http://plugins.jquery.com/project/validate).
	   Written by Keith Wood (kbwood{at}iinet.com.au).
	   Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and
	   MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses.
	   Please attribute the author if you use it. */


	j$.datepicker._selectDate2 = j$.datepicker._selectDate;

	j$.extend(j$.datepicker.regional[''], {
		validateDate: 'Please enter a valid date',
		validateDateMin: 'Please enter a date on or after {0}',
		validateDateMax: 'Please enter a date on or before {0}',
		validateDateMinMax: 'Please enter a date between {0} and {1}',
		validateDateCompare: 'Please enter a date {0} {1}',
		validateDateToday: 'today',
		validateDateOther: 'the other date',
		validateDateEQ: 'equal to',
		validateDateNE: 'not equal to',
		validateDateLT: 'before',
		validateDateGT: 'after',
		validateDateLE: 'not after',
		validateDateGE: 'not before'
	});

	j$.extend(j$.datepicker._defaults, j$.datepicker.regional['']);

	j$.extend(j$.datepicker, {

		/* Trigger a validation after updating the input field with the selected date.
		   @param  id       (string) the ID of the target field
		   @param  dateStr  (string) the chosen date */
		_selectDate: function(id, dateStr) {
			this._selectDate2(id, dateStr);
			var input = j$(id);
			var inst = this._getInst(input[0]);
			if (!inst.inline && j$.fn.validate)
				input.parents('form').validate().element(input);
		},

		/* Correct error placement for validation errors - after (before if R-T-L) any trigger.
		   @param  error    (jQuery) the error message
		   @param  element  (jQuery) the field in error */
		errorPlacement: function(error, element) {
			var trigger = element.next('.' + j$.datepicker._triggerClass);
			var before = false;
			if (trigger.length == 0) {
				trigger = element.prev('.' + j$.datepicker._triggerClass);
				before = (trigger.length > 0);
			}
			error[before ? 'insertBefore' : 'insertAfter'](trigger.length > 0 ? trigger : element);
		},

		/* Format a validation error message involving dates.
		   @param  message  (string) the error message
		   @param  params  (Date[]) the dates
		   @return  (string) the formatted message */
		errorFormat: function(inst, message, params) {
			var format = j$.datepicker._get(inst, 'dateFormat');
			j$.each(params, function(i, v) {
				message = message.replace(new RegExp('\\{' + i + '\\}', 'g'),
					j$.datepicker.formatDate(format, v) || 'nothing');
			});
			return message;
		}
	});

	var lastElement = null;

	/* Validate date field. */
	j$.validator.addMethod('dpDate', function(value, element, params) {
			lastElement = element;
			var inst = j$.datepicker._getInst(element);
			var dateFormat = j$.datepicker._get(inst, 'dateFormat');
			try {
				var date = j$.datepicker.parseDate(dateFormat, value, j$.datepicker._getFormatConfig(inst));
				var minDate = j$.datepicker._determineDate(inst, j$.datepicker._get(inst, 'minDate'), null);
				var maxDate = j$.datepicker._determineDate(inst, j$.datepicker._get(inst, 'maxDate'), null);
				var beforeShowDay = j$.datepicker._get(inst, 'beforeShowDay');
				return this.optional(element) || !date ||
					((!minDate || date >= minDate) && (!maxDate || date <= maxDate) &&
					(!beforeShowDay || beforeShowDay.apply(element, [date])[0]));
			}
			catch (e) {
				return false;
			}
		}, function(params) {
			var inst = j$.datepicker._getInst(lastElement);
			var minDate = j$.datepicker._determineDate(inst, j$.datepicker._get(inst, 'minDate'), null);
			var maxDate = j$.datepicker._determineDate(inst, j$.datepicker._get(inst, 'maxDate'), null);
			var messages = j$.datepicker._defaults;
			return (minDate && maxDate ?
				j$.datepicker.errorFormat(inst, messages.validateDateMinMax, [minDate, maxDate]) :
				(minDate ? j$.datepicker.errorFormat(inst, messages.validateDateMin, [minDate]) :
				(maxDate ? j$.datepicker.errorFormat(inst, messages.validateDateMax, [maxDate]) :
				messages.validateDate)));
		});

	/* And allow as a class rule. */
	j$.validator.addClassRules('dpDate', {dpDate: true});

	var comparisons = {equal: 'eq', same: 'eq', notEqual: 'ne', notSame: 'ne',
		lessThan: 'lt', before: 'lt', greaterThan: 'gt', after: 'gt',
		notLessThan: 'ge', notBefore: 'ge', notGreaterThan: 'le', notAfter: 'le'};

	/* Cross-validate date fields.
	   params should be an array with [0] comparison type eq/ne/lt/gt/le/ge or synonyms,
	   [1] 'today' or date string or Date or other field selector/element/jQuery OR
	   an object with one attribute with name eq/ne/lt/gt/le/ge or synonyms
	   and value 'today' or date string or Date or other field selector/element/jQuery OR
	   a string with eq/ne/lt/gt/le/ge or synonyms followed by 'today' or date string or jQuery selector */
	j$.validator.addMethod('dpCompareDate', function(value, element, params) {
			if (this.optional(element)) {
				return true;
			}
			params = normaliseParams(params);
			var thisDate = j$(element).datepicker('getDate');
			var thatDate = extractOtherDate(element, params[1]);
			if (!thisDate || !thatDate) {
				return true;
			}
			lastElement = element;
			var result = true;
			switch (comparisons[params[0]] || params[0]) {
				case 'eq': result = (thisDate.getTime() == thatDate.getTime()); break;
				case 'ne': result = (thisDate.getTime() != thatDate.getTime()); break;
				case 'lt': result = (thisDate.getTime() < thatDate.getTime()); break;
				case 'gt': result = (thisDate.getTime() > thatDate.getTime()); break;
				case 'le': result = (thisDate.getTime() <= thatDate.getTime()); break;
				case 'ge': result = (thisDate.getTime() >= thatDate.getTime()); break;
				default:   result = true;
			}
			return result;
		},
		function(params) {
			var inst = j$.datepicker._getInst(lastElement);
			var messages = j$.datepicker._defaults;
			params = normaliseParams(params);
			var thatDate = extractOtherDate(lastElement, params[1], true);
			thatDate = (params[1] == 'today' ? messages.validateDateToday : (thatDate ?
				j$.datepicker.formatDate(j$.datepicker._get(inst, 'dateFormat'), thatDate,
				j$.datepicker._getFormatConfig(inst)) : messages.validateDateOther));
			return messages.validateDateCompare.replace(/\{0\}/,
				messages['validateDate' + (comparisons[params[0]] || params[0]).toUpperCase()]).
				replace(/\{1\}/, thatDate);
		});

	/* Normalise the comparison parameters to an array.
	   @param  params  (array or object or string) the original parameters
	   @return  (array) the normalised parameters */
	function normaliseParams(params) {
		if (typeof params == 'string') {
			params = params.split(' ');
		}
		else if (!j$.isArray(params)) {
			var opts = [];
			for (var name in params) {
				opts[0] = name;
				opts[1] = params[name];
			}
			params = opts;
		}
		return params;
	}

	/* Determine the comparison date.
	   @param  element  (element) the current datepicker element
	   @param  source   (string or Date or jQuery or element) the source of the other date
	   @param  noOther  (boolean) true to not get the date from another field
	   @return  (Date) the date for comparison */
	function extractOtherDate(element, source, noOther) {
		if (source.constructor == Date) {
			return source;
		}
		var inst = j$.datepicker._getInst(element);
		var thatDate = null;
		try {
			if (typeof source == 'string' && source != 'today') {
				thatDate = j$.datepicker.parseDate(j$.datepicker._get(inst, 'dateFormat'),
					source, j$.datepicker._getFormatConfig(inst));
			}
		}
		catch (e) {
			// Ignore
		}
		thatDate = (thatDate ? thatDate : (source == 'today' ? new Date() :
			(noOther ? null : j$(source).datepicker('getDate'))));
		if (thatDate) {
			thatDate.setHours(0, 0, 0, 0);
		}
		return thatDate;
	}


	var selectCurrPageInNav = function() {
		var pageId = j$("body").attr("id");

		if (pageId.indexOf("info_") > -1) {
			var infoPageId = pageId.substring(pageId.indexOf("info_") + 5);
			j$(".nav_"+infoPageId).addClass("selected");
		}

		if (pageId.indexOf("default") > -1 || pageId.indexOf("jobs_") > -1) {
			j$(".nav_jobs").addClass("selected");
		}

		if (pageId.indexOf("report_") > -1) { // has Analytics section
			j$(".nav_analytics").addClass("selected");
			var adminPageId = pageId.substring(pageId.indexOf("_") + 1);
			j$(".nav_"+adminPageId).addClass("selected");
		}

		if (pageId.indexOf("campaigns_") > -1) {
			j$(".nav_campaigns").addClass("selected");
		}

		if (pageId.indexOf("admin") > -1 || pageId.indexOf("users") > -1) {
			j$(".nav_administration").addClass("selected");
		}

		j$('.nav_page1, .nav_page2, .nav_page3').each(function(){
			var nav_href = j$(this).attr('href');

			if (nav_href.indexOf('/', nav_href.length - 1) !== -1) nav_href = nav_href.substring(0,nav_href.length-1);

			if (nav_href.indexOf(TVAPP.property.referrer_code_prefix) == 0) nav_href = nav_href.substring(TVAPP.property.referrer_code_prefix.length, nav_href.length);

			if (nav_href.indexOf('/') == 0) nav_href = nav_href.substring(1, nav_href.length);

			while (nav_href.indexOf('/') !== -1) nav_href = nav_href.replace("/", "_");

			if (pageId == nav_href) j$(this).addClass('selected');
		});

		if (j$("#campaign_steps_hldr").length && !j$(".content_header + #campaign_steps_hldr").length) {
			j$(".main_nav").addClass("campaign_nav");
		}
	};

	var processFlashForWin = function() {
		// Fixes overlap issues with videos/flash and overlaid content on IE/Chrome on Windows
		// Adds/replaces wmode param so that flash respects document z-index/layering
		if (TVAPP.browserDetect.OS == 'Windows') {
			j$('iframe', '#container').each(function() {
				var url = j$(this).attr("src");
				var result = url.search(/youtube/i);
				if (result != -1) {
					result = url.indexOf('?');
					if (result != -1) {
						j$(this).attr("src",url+"&wmode=opaque");
					} else {
						j$(this).attr("src",url+"?wmode=opaque");
					}
				}
			});

			if (!(TVAPP.getInternetExplorerVersion() >= 8.0 && TVAPP.getInternetExplorerVersion() < 9.0)) {
				j$('object', '#container').each(function() {
					var replaced_obj = j$(this).clone();
					if (replaced_obj.children('param[name="wmode"]').length) {
						replaced_obj.children('param[name="wmode"]').attr('value','opaque');
					} else {
						replaced_obj.children('param:last').after('<param value="opaque" name="wmode">');
					}
					j$('embed', replaced_obj).attr('wmode','opaque');
					j$(this).after(replaced_obj);
					j$(this).remove();
				});
			}

			j$('embed', '#container').each(function() {
				if (j$(this).attr('wmode') !== 'opaque') {
					j$(this).clone().attr('wmode','opaque').insertAfter(j$(this));
					j$(this).remove();
				}
			});
		}
	};

	TVAPP.stateOnLoad = function() {
		var hashInfo = window.location.hash.substring(1);
		j$.log("hash = " + hashInfo);
		j$(hashInfo.split('&')).each(function(){
			if(this.substr(0,6)=="modal_") {
				switch(this.substr(6)){
					case "recruiter":
						j$(document).trigger("registerClicked",{registrationType:"recruiter"});
						break;
					case "candidate":
						j$(document).trigger('generalCandidate');
						break;
					case "recommend_friend":
						if(TVAPP.property.site_mode != '1') {
							j$(document).trigger('generalCandidate',{type:'referFriend'});
						}
						break;
					case "job_alert":
						TVAPP.login.bindRegister({mode:"register"});
						TVAPP.modal.open("register_modal_tc",{},{mode:'register'});
						break;
				}
				// clear the hash from the url
				if(History.enabled && !j$('html').hasClass('ie')) {
					History.replaceState({}, TVAPP.property.docTitle, window.location.pathname + window.location.search);
				} else {
					window.location.hash='';
				}

			}
		});
	};


	var standardModalResize = function (modal) {
		/*if(j$(window).height() < 650) {
			j$(modal).addClass("centered_modal");

			var diff = 650-j$(window).height();
			if(diff<150) {
				j$(".preview_holder",modal).css("height",460-diff);
			}
			else {
				j$(".preview_holder",modal).css("height",310);
			}

		} else {
			j$(modal).removeClass("centered_modal");
			j$(".preview_holder",modal).css("height",460);
		}*/
	};

	TVAPP.openRecip = function(modal,settings) {

		var config = {"placementFunc": standardModalResize};

		if (settings) j$.extend(config, settings);

		var overlay = j$("#overlay");

		j$(modal).appendTo("body").css({"margin-left": (j$(modal).width()/2)*-1});

		config.placementFunc(modal);

		var place = function(){config.placementFunc(modal)};

		j$(window).resize(place);

		j$(modal).fadeIn(300);
		if (j$.browser.msie) {j$(overlay).show();} else {j$(overlay).fadeIn(300);}


		j$(".jCloseModal",modal).click(function(){
			if (j$.browser.msie) {j$(overlay).hide();} else {j$(overlay).fadeOut(function(){j$(this).hide();});}

			j$(window).unbind('resize',place);
		});
	};


	/* For Modal Content Loaded Dynamically - should eventually do this for all modals */
	TVAPP.openAjaxModal = function(modal_content,settings,context,cache) {
		if (cache == null) { cache = true; }

		var config = {
			"placementFunc": standardModalResize,
			"callback": function() { j$(document).trigger(modal_content+'Loaded'); }
		};

		if (settings) j$.extend(config, settings);

		var overlay = j$("#overlay");

		if (cache) {
			j$(TVAPP.smLoadContent(modal_content,context)).appendTo("body");
		}
		else {
			j$(TVAPP.ajaxIncludeContent({template:modal_content,context:context})).appendTo("body");
		}

		var modal = j$(".jModalAjax");

		j$(modal).css({"margin-left": (j$(modal).width()/2)*-1});

		config.placementFunc(modal);

		var place = function(){config.placementFunc(modal)};

		j$(window).resize(place);

		j$(modal).fadeIn(300);
		if (j$.browser.msie) {j$(overlay).show();} else {j$(overlay).fadeIn(300);}

		j$(".jCloseAjaxModal",modal).click(function(){

			if (j$.browser.msie) {
				j$(overlay).hide();
				j$(modal).remove();
			}
			else {
				j$(overlay).fadeOut(function(){j$(this).hide();});
				j$(modal).fadeOut(function(){j$(modal).remove();});
			}

			j$(window).unbind('resize',place);
		});

		if(config.callback != undefined) config.callback();
	};

	/* Custom image modal loader - TODO: should eventually be combined with the loader above
	 * modal_content references the template to be loaded and should be 'modal_images' for this
	 * modal_img_context is an object that contains all the info we need to construct the modal.
	 *   - Which is: mod_img_path (optional), mod_img_src, and mod_img_title (see info_help.js for an example) */
	TVAPP.openAjaxImageModal = function(modal_content,settings,mod_img_context) {
		// Just passing in title to the modal, since that's the only thing still generated in the modal template itself now
		var source_button = j$('.clicked');
		var context = "mod_img_title=" + mod_img_context["mod_img_title"];

		var mod_img_path = mod_img_context["mod_img_path"] || "";
		var mod_img_src = mod_img_context["mod_img_src"].split('__');

		// Load the modal template div into body
		j$(TVAPP.smLoadContent(modal_content,context)).appendTo("body");

		var overlay = j$("#overlay");
		var modal = j$(".jModalImages");
		var mod_img_index = 0;
		var mod_curr_img = '#mod_img_0';
		var mod_img_dims = {};
		var mod_img_prev = j$(".jModImgPrev");
		var mod_img_next = j$(".jModImgNext");

		modal.hide();

		// Fix corrupted character issue in IE
		if (j$.browser.msie) {
			modal.find('h3').html(mod_img_context["mod_img_title"]);
		}

		// Let's cycle through the image sources passed in, generate them in the modal, and assign a class when they have loaded.
		// The class is important, since we check for it later and need to be absolutely sure the image has loaded -- otherwise bad things happen.
		// The source has to be set after load() is bound, because jQuery is inconsistent with the load() event on images.
		// TODO: Let's also bind an error handler to remove just that image (and its associated array value) if it doesn't load (so as to not break the whole modal).
		j$(mod_img_src).each(function(index) {
			if (!j$.browser.msie || !window.ie7) {
				j$('.jHelpContent').append('\r\n\t\t\t\t<img id=\"mod_img_' + index + '\" src=\"\">');
			} else {
				j$('.jHelpContent').append('<img id=\"mod_img_' + index + '\" src=\"\">');
			}
			j$('#mod_img_'+index).hide().on('load',function() {
				j$(this).addClass('mod_img_ready');
			}).on('error',function() {
				j$.log('Error loading modal image! Source: ' + j$(this).attr('src'));
				// TODO: Handle errors, like image not loading, since this breaks stuff. But for now, just make sure to pass in good stuff.
				// For now, we'll just destroy the whole modal if things aren't working out our way. Nevermind, breaks in IE.
				//j$(this).remove();
				//j$(overlay).hide();
				//j$(modal).remove();
			}).attr('src','/images/modal_images/' + mod_img_path + this);
		});

		var closeModal = function() {
			if (j$.browser.msie) {
				overlay.hide();
				modal.remove();
			} else {
				overlay.fadeOut(function(){j$(this).hide();});
				modal.fadeOut(function(){j$(this).remove();});
			}
			source_button.focus();
			j$(document).unbind('keydown.imageModal');
			j$(window).unbind('resize.imageModal');
			overlay.unbind('click.imageModal');
		}

		var modalResize = function() {
			modal.show();

			if (mod_img_dims[mod_img_index + 'h'] == undefined && mod_img_dims[mod_img_index + 'w'] == undefined) {
				mod_img_dims[mod_img_index + 'h'] = j$(mod_curr_img).height();
				mod_img_dims[mod_img_index + 'w'] = j$(mod_curr_img).width();
			}

			if (j$(window).width() < (mod_img_dims[mod_img_index + 'w'] + 50)) {
				j$(mod_curr_img).css('height','auto');
				j$(mod_curr_img).width(j$(window).width() - 70);

				if (j$(window).height() < (j$(mod_curr_img).height() + 100)) {
					j$(mod_curr_img).css('width','auto');
					j$(mod_curr_img).height(j$(window).height() - 120);
				}
			} else if (j$(window).height() < (mod_img_dims[mod_img_index + 'h'] + 100)) {
				j$(mod_curr_img).css('width','auto');
				j$(mod_curr_img).height(j$(window).height() - 120);
			} else {
				j$(mod_curr_img).css('width','auto');
				j$(mod_curr_img).css('height','auto');
			}

			modal.css({"margin-left": (modal.width() / 2) * -1 - 6});
			modal.css({"margin-top": (modal.height() / 2) * -1 - 10});

			modal.hide();
		};

		j$(".jCloseAjaxModal",modal).click(closeModal);

		overlay.bind('click.imageModal', closeModal);

		j$(document).bind('keydown.imageModal', function(e) {
			var key_code = (e.keyCode ? e.keyCode : e.which);
			if (key_code == 27) {
				//e.preventDefault();
				closeModal();
			} else if (key_code == 37 && mod_img_index !== 0) {
				//e.preventDefault();
				modalDisplayImage(-1);
			} else if (key_code == 39 && mod_img_index !== (mod_img_src.length - 1)) {
				//e.preventDefault();
				modalDisplayImage(1);
			} else if (key_code == 9) {
				setTimeout(function() {
					if (!j$.contains(modal[0], document.activeElement)) {
						j$(".jCloseAjaxModal",modal).focus();
					}
				}, 0);
			}
			source_button.removeClass("clicked");
		});

		j$(window).bind('resize.imageModal', function() {
			modalResize();
			modal.show();
		});

		// If multiple images are passed in, we need to enable navigation
		if (mod_img_src[1]) {
			mod_img_prev.show();
			mod_img_next.show();

			mod_img_prev.click(function() {
				modalDisplayImage(-1);
			});

			mod_img_next.click(function() {
				modalDisplayImage(1);
			});
		}

		// This function displays the image we want (with modal resizing to fit), and is run once when the modal is called up and again each time the nav is clicked.
		// If a direction (1 or -1) is passed in, it will hide the current image and display the previous or next one accordingly.
		var modalDisplayImage = function(direction) {
			j$(mod_curr_img).hide();

			// If multiple images are passed in, we need to deal with the navigation each time this function is called
			if (mod_img_src[1]) {
				if (direction == 1) {
					mod_img_index++;
				} else if (direction == -1) {
					mod_img_index--;
				}

				mod_curr_img = '#mod_img_' + mod_img_index;

				if (mod_img_index == 0) {
					mod_img_prev.addClass('mod_nav_disabled');
					mod_img_prev.unbind('click');
					mod_img_next.focus();
				}

				if (mod_img_index == (mod_img_src.length - 1)) {
					mod_img_next.addClass('mod_nav_disabled');
					mod_img_next.unbind('click');
					mod_img_prev.focus();
				}

				if (mod_img_prev.hasClass('mod_nav_disabled') && mod_img_index !== 0) {
					mod_img_prev.removeClass('mod_nav_disabled');
					mod_img_prev.click(function() {
						modalDisplayImage(-1);
					});
				}

				if (mod_img_next.hasClass('mod_nav_disabled') && mod_img_index !== (mod_img_src.length - 1)) {
					mod_img_next.removeClass('mod_nav_disabled');
					mod_img_next.click(function() {
						modalDisplayImage(1);
					});
				}
			}

			// If the image has loaded (class indicates it's ready), let's run through this and show it right away. Otherwise, do that when the image has really loaded.
			if (j$(mod_curr_img).hasClass('mod_img_ready')) {
				j$(mod_curr_img).show();
				modalResize();
				if (j$.browser.msie) {
					j$(overlay).show();
					j$(modal).fadeIn(300);
				} else {
					j$(overlay).fadeIn(300, function(){
						j$(modal).fadeIn(300);
					});
				}
			} else {
				j$(mod_curr_img).on('load',function() {
					j$(this).show();
					modalResize();
					if (j$.browser.msie) {
						j$(overlay).show();
						j$(modal).fadeIn(300);
					} else {
						j$(overlay).fadeIn(300, function(){
							j$(modal).fadeIn(300);
						});
					}
				});
			}
			j$(document).bind('keydown.imageModal');
		};

		// Everything's set, let's display the first image
		modalDisplayImage();
	};



	function getJobSearchData() {
		var input_data = [];
		j$(".job_search_input").each(function () {
			if(j$(this).attr("type") == "checkbox") {
					if(j$(this).prop("checked")) {
							input_data.push(this);
					}
			}
			else if (!( j$(this).hasClass("grey_out"))) {
				if (!( j$(this).hasClass("placeholder"))) {
					input_data.push(this);
				}
			}
		});
		return input_data;
	}

	TVAPP.handleJobSearch = function(e) {
		var field_data = getJobSearchData();

		j$(".jExactSearch").each(function(){
			j$(".jExactFields").val(j$(".jExactFields").val() + j$(this).attr("name") + ",");
		});

		j$(".jExactFields").val(j$(".jExactFields").val().substring(0, j$(".jExactFields").val().length-1));

		var serialized_form = '?';
		j$.each(field_data, function(key, value) {
			serialized_form += value.name + '=' + encodeURIComponent(value.value) + '&';
		});

		var url = TVAPP.property.referrer_code_prefix + "/jobs/search" + serialized_form;

		j$("#jJobSearchSubmitBtn").css({"font-size":"1px","color":"#e9e9e9","text-shadow":"0px 0px 0px transparent","background-color":"#e9e9e9"}).spin({
			lines: 17, // The number of lines to draw
			length: 0, // The length of each line
			width: 4, // The line thickness
			radius: 3, // The radius of the inner circle
			color: '#555', // #rgb or #rrggbb
			trail: 50 // Amount of afterglow
		});

		document.cookie = "lastsearch_params="+url+";path=/";
		//if(typeof(search_page) != "undefined" && search_page)
		if (j$("body").attr("id").indexOf("jobs_search_")>-1) {// only from full job listings page

			j$(".search_bubble").css("top",j$("#content").position().top + 120).show();

			j$("#results_content").addClass('job_results_loading');
			j$("html, body").animate( { scrollTop: 0 }, 0 );

			j$(".search_title").html("Retrieving results...");

			setTimeout(function(){window.location = url;},300); // Hack for IE so that IE will show progress bar animation
		}
		else {
			window.location = url;
			document.cookie = "jobs_searched=true;path=/";
		}
	};

	/* Experimental: The wrapper function might improve upon jQuery's getScript method */
	TVAPP.getScript = function(script_path, loadcomplete_element, callback) {
		j$.log(loadcomplete_element);
		var interval;
		if (TVAPP.getScript.script_called == false) {j$.log("script called");
			j$.getScript(script_path);
			TVAPP.getScript.script_called = true;
			interval = setInterval(function(){TVAPP.getScript(script_path, loadcomplete_element, callback)}, 1000);
		} else if (loadcomplete_element) {
			clearInterval(interval);
			callback();
		}
	};
	TVAPP.getScript.script_called = false;

	var header = j$("#header");
	var container = j$("#container");
	var footer = j$("#footer");
	var subheader = j$("#custom_preheader");

	var header_tbe = j$("#header_tbe");

	TVAPP.tbeFrameSize = function(height) {
		j$('#jResizeFrame').attr("src",TVAPP.guid(j$("#jResizeFrame").data("crosscom")+"?height="+height));
		//j$('#jResizeFrame').attr("src","http://localhost:8888/helper.html?height="+height);
	};


	function refreshScrollerBindings() {
		var search_hldr = j$('.jSearchHldr').show();

		if(!j$('body').hasClass('mobile')){ search_hldr.height(search_hldr.height());
		} else{
			search_hldr.removeAttr('style');
		}

		var search_banner = j$('.jSearchBanner', search_hldr),
			search_heading = j$('.jHeadingWrapper', search_hldr),
			heading_height_orig = search_heading.height(),
			positioner = j$('.jSearchPositioner', search_hldr),
			p_top = parseFloat(positioner.css('padding-top')),
			p_top_min = 5,
			p_bottom = parseFloat(positioner.css('padding-bottom')),
			p_bottom_min = 6,
			search_border = j$('.jSearchBorder', search_hldr);

		search_hldr.css('display', '');

		var searchScrollHandler = function() {
			var fix_point = j$(window).scrollTop(),
				heading_height = heading_height_orig,
				hldr_top = search_hldr.offset().top;

			if (j$('body').hasClass('mobile')) {
				if (search_hldr.css('display') == 'none') {
					search_hldr.show();
					hldr_top = search_hldr.offset().top;
					search_hldr.hide();
				}

				fix_point += j$('#header').outerHeight();
			}

			if (search_hldr.hasClass('hidden_hero')) heading_height = 0;

			if (fix_point >= hldr_top) {
				if (!j$('body').hasClass('mobile')) search_banner.addClass('search_fixed');

				var sub_amt = (fix_point - hldr_top);

				if (sub_amt < heading_height) {
					if (!j$('body').hasClass('mobile')) {
						search_heading.css('height', heading_height - sub_amt);
						//j$('h1', search_heading).css('opacity', 1 - sub_amt * 1.5 / heading_height);
						j$('.description_area', search_heading).css('opacity', 1 - sub_amt * 1.5 / heading_height); // * 3 (w/ h1)

						positioner.css({ 'background-position': '0 -' + (heading_height - sub_amt) + 'px', 'padding-bottom': '', 'padding-top': '' });

						search_border.css('opacity', sub_amt * 1.5 / heading_height);
					}
				} else {
					positioner.css('background-position', '0 0');

					if (j$('body').hasClass('mobile')) {
						if (j$('body').hasClass('portal')) {
							if (sub_amt > heading_height + positioner.outerHeight() + 20) {
								j$('#jMenuSearchToggle').parent().show();
							} else {
								j$('#jMenuSearchToggle').parent().hide();
							}
						} else {
							j$('#jMenuSearchToggle').parent().show();
						}
					} else {
						search_heading.css('height', 0);
						j$('.description_area', search_heading).css('opacity', 0);

						sub_amt = (sub_amt - heading_height) / 2;

						if (p_top - sub_amt > p_top_min) {
							positioner.css({
								'padding-bottom': p_bottom - sub_amt,
								'padding-top': p_top - sub_amt
							});
						} else {
							positioner.css({
								'padding-bottom': p_bottom_min,
								'padding-top': p_top_min
							});
						}

						search_border.css('opacity', 1);
					}
				}
			} else {
				search_banner.removeClass('search_fixed');

				search_heading.css('height', '');
				j$('.description_area', search_heading).css('opacity', '');

				positioner.css({ 'background-position': '0 -122px', 'padding-bottom': '', 'padding-top': '' });

				search_border.css('opacity', '');

				if (j$('body').hasClass('mobile')) {
					if (j$('body').hasClass('portal')) {
						j$('#jMenuSearchToggle').parent().hide();
					} else {
						j$('#jMenuSearchToggle').parent().show();
					}
				}
			}
		}

		TVAPP.scrollHandler = function() {
			if (j$('.jSearchHldr').length && !j$('#sitebuilder_enabled').length) {
				searchScrollHandler();
			}
		}
		j$(window).scroll(TVAPP.scrollHandler);
		TVAPP.scrollHandler();
	}
	j$(document).bind("refreshUserBindings",refreshScrollerBindings);


	TVAPP.blurSearchBannerImage = function(force){
		if (j$('body').hasClass('portal') && (force || !j$('.jSearchPositioner').hasClass('jBGRendered'))) {
			var mediaUrl = j$('.jSearchBanner').css('background-image');
			if(mediaUrl.indexOf(TVAPP.property.site_name) != -1) {
				j$('.jSearchPositioner').addClass('jBGRendered').blurjs({
					source: '.jSearchBanner',
					overlay: 'rgba(55, 55, 55, 0.75)',
					radius: 6
				});
			}
		}
	}

	TVAPP.stylisticChoices = function() {
		if(j$(window).width() > 767) {
			j$("body").addClass("desktop");
			j$("body").removeClass("mobile");

			j$('.filter_hldr', '.jJobSearchFilters').removeClass('jCollapsedHolder');

		} else {
			j$("body").addClass("mobile");
			j$("body").removeClass("desktop");
		}

		var total_height = j$('#header_settings').outerHeight() + j$(header).outerHeight() + j$(container).outerHeight() + j$(footer).outerHeight();

		if (j$(subheader).length) {
			total_height += j$(subheader).outerHeight();
		}

		if (j$("#jResizeFrame").length) {
			total_height += j$(header_tbe).outerHeight();

			TVAPP.tbeFrameSize(total_height);
		}

		refreshScrollerBindings();
	};

	TVAPP.mobileAgent = function() {
		if (/iP(od|hone)/i.test(window.navigator.userAgent)) {
			return true;
		  }
		  if (/Android/i.test(window.navigator.userAgent)) {
			if (/Mobile/i.test(window.navigator.userAgent)) {
			  return true;
			}
		  }
		  return false;
	}

	TVAPP.refreshUserStatus = function() {
		j$(document).trigger('UserRefreshArea');

		j$(".jUserRefreshArea").each(function(){
			var contentHTML = "";
			var area_id = j$(this).attr("id");
			var context_info = "";

			if(j$(".jUserRefreshContextId",this).length) {
				context_info = j$(".jUserRefreshContextId",this).val();
			}

			if (j$(".jUserRefreshJobId",this).length) {
				contentHTML = TVAPP.ajaxIncludeContent({
					template:area_id,
					job_id:j$(".jUserRefreshJobId",this).val(),
					context:context_info
				});
			}
			else {
				contentHTML = TVAPP.ajaxIncludeContent({
					template:area_id,
					context:context_info
				});
			}
			TVAPP.notify.close();// close any notifications (locale selection)
			j$(this).empty().html(contentHTML);
		});

		j$('.jBlockRegion').children('.module').each(function(){
			if(j$(this).find('.jUserRefreshBlock').length) {
				TVAPP.refreshBlock(j$(this));
			}
		});

		TVAPP.stylisticChoices();

		j$(document).trigger("refreshUserBindings");
	};

	TVAPP.refreshBlock = function($block) {
		TVAPP.ajaxIncludeContent({
			template: 'modules/'+$block.data('name'),
			context: $block.find('.jBlockContext').length ? $block.find('.jBlockContext').val() : '',
			async: true,
			success: function(response) {
				$block.empty().html(response);
				j$(document).trigger('refreshBlockBindings', $block);
			}
		});
	};

	TVAPP.refreshBlockRegion = function($region, data) {
		data = data || {};
		var defaults = {
				page: $region.data('page'),
				area: $region.data('area'),
				context: $region.data('context'),
				success: function () {}
			},
			opts = j$.extend({}, defaults, data);

		TVAPP.ajaxIncludeContent({
			template:"block_loop",
			context:'page_short_name='+opts.page+'&area_short_name='+opts.area+(opts.context?'&'+opts.context:''),
			async: true,
			success: function(response) {
				$region.empty().html(response);
				j$(document).trigger('refreshBlockBindings', $region);
				opts.success();
			}
		});
	};


	// usage of this function has been removed as part of VPAT changes
	/*
	(function($){
		$.fn.counter = function(num)
		{
			j$(this).html("");

			for (i=0; i < num.length; i++) {
				var sprite_pos = num.charAt(i) * -29;
				j$(this).append(j$("<div class='counter_num'></div>").css("background-position",sprite_pos+"px top"));
			}
		};
	})(jQuery);
	*/

	TVAPP.loginWelcomeBindings = function() {
		var buildForms = function(){
			j$(".form_template_LoginForm").clone(false).attr("id","jLoginForm").appendTo("#jFormHolder");
			j$("#jLoginForm").show();
			j$(".form_template_ForgotPasswordForm").clone(false).attr("id","jForgotPasswordForm").appendTo("#jFormHolder");
			if (j$.browser.msie) {
				j$("#jLoginForm .inputtypepassword.error").blur(function(){return false;});
			}
			j$(".jCancelBtn","#jLoginPanel").click(function(e){
				e.preventDefault();
				j$("#jSignInSection .jInvisibleBtn").click();
			});
		};
		buildForms();

		//Temps start-----
		j$("input[placeholder]","#jPanelPasswordHldr").each(function(){
			if (!j$(this).hasClass("placeholder")) {
				j$(this).placeholder();
			}
		});

		j$("input[placeholder]","#jPanelLoginHldr").each(function(){
			if (!j$(this).hasClass("placeholder")) {
				j$(this).placeholder();
			}
		});

		j$("#jPanelCancel").click(function(){
			j$("#jLoginPopoverBtn").clickover('forcehide');
		});

		j$("#jForgotPassword").click(function(){
			j$("#jPanelLoginHldr").hide(300,"easeInOutCirc",function(){
				j$("#jPanelLoginForm div.error").remove();

				j$("#jPanelPasswordHldr").show(400,"easeInOutCirc",function(){});
			});
		});

		j$("#jPasswordCancel").click(function(){
			j$("#jPanelPasswordHldr").hide(300,"easeInOutCirc",function(){
				j$("#jPanelLoginHldr div.error").remove();

				j$("#jPanelLoginHldr").show(400,"easeInOutCirc",function(){});
			});
		});

		j$("#jForgotSubmit").click(function(){

		});

		//Temps end-----

		j$("#jSignInSection .jInvisibleBtn").toggle(
			function(){
				var resetForm = function(){
					j$("#jLoginForm")[0].reset();
				};
				var ht = 290;
				if (j$("body").hasClass("linkedinoff")) {var ht = 256;}
				if (TVAPP.browserDetect.browser == "Explorer") {resetForm();j$("#jLoginPanel").show().animate({"height":ht}, 500);}
				else {resetForm();j$("#jLoginPanel").show().animate({"height":ht, "opacity":1}, 500);}
//				j$("#jLoginForm input[placeholder], #jForgotPasswordForm input[placeholder]").placeholder();
				return false;
			},
			function(){
				var resetPanel = function(){
					j$("#jLoginForm").remove();
					j$("#jForgotPasswordForm").remove();
					j$("#jLoginPanel").hide();
					buildForms();
				};
				j$("div.error", "#jLoginPanel").hide();
				if (TVAPP.browserDetect.browser == "Explorer"){j$("#jLoginPanel").animate({"height":0}, 500, resetPanel);}
				else {j$("#jLoginPanel").animate({"opacity":0, "height": 0}, 500, resetPanel);}
				return false;
			}
		);

		j$("#jSignInBtn_facebook, #jSignInBtn_twitter, #jSignInBtn_linkedin, #jSignInBtn_weibo")
			.click(function(event){
				event.preventDefault();
				TVAPP.login.bindRegister({click_event: event, mode:'register'});
				TVAPP.login[j$(this).attr('data-channel')]({click_event: event});
			})
			.each(function(){
				if (j$(this).hasClass("custom_tooltip")) {

					j$(this).tooltip({
						placement:'left',
						title:TVAPP.smDict('SocialNetwork.TooltipText.'+j$(this).attr('id').substring(11))
					});
				}
			});

		j$("#jCreateAccount").unbind('click').click(function(event){
			j$(document).trigger("registerClicked", {action: event.currentTarget});
			return false;
		});

	};






	/*~-~-~-~-~-~-~-~-~ START Invite Recruiter ~-~-~-~-~-~-~-~-~*/

	var handleInviteRecruiter = function(modal){

		var jRecInvForm = j$(".jRecInvForm",modal);

		jRecInvForm.validate(
			{
				rules: {
					"Invitee.email" : {required:true, email:true}
				},
				messages: {
					"Invitee.email": {required: TVAPP.smDict("FieldError.default_required")}
				},
				errorElement:"div"
			}
		);

		if (jRecInvForm.valid())
		{

			TVAPP.modal.loadingStart();

			j$.ajax({
				type: 'POST',
				url: TVAPP.guid(jRecInvForm.attr('action')),
				data: jRecInvForm.serialize(),
				success: function(result){
					if(result.Status == "OK") {

						var emailAddress = j$("input[name='Invitee.email']",modal).val(),
							successMsg = TVAPP.smDict('InviteRecruiter.success').replace('[[emailAddress]]', emailAddress);

						j$("body").modal({
							"text": successMsg,
							onClose: function(){TVAPP.modal.close(true);}
						});
					}
				},
				dataType: 'json',
				error: function(xhr, textStatus, error) {
					TVAPP.masterErrorHandler(xhr, textStatus, error, null);
				},
				complete: function() {
					TVAPP.modal.loadingStop();
				}
			});
		}
	};

	var handleInviteRecruiterInitialize = function(e, data) {
		data = data || {};

		var modal = j$('#cboxLoadedContent');

		if (j$.browser.msie){TVAPP.googleToolbarFixForIE();}
		var jRecInvForm = j$(".jRecInvForm",modal);

		j$(".jRecInvForm input").keydown(function(e) {
			if(e.which == 13) {
				j$(this).blur().focus();
				handleInviteRecruiter(modal);
			}
		});

		j$("#jRecInvSend").click(function(){
			handleInviteRecruiter(modal)
		});

	};

	j$(document).bind("invite_recruiter_init", handleInviteRecruiterInitialize);

	/*~-~-~-~-~-~-~-~-~- END Invite Recruiter -~-~-~-~-~-~-~-~-~*/




	TVAPP.keyBindings = function(area) {
		j$(".jSettings",area).click(function(event){
			event.preventDefault();
			var destination = j$(this).attr("href");

			if( TVAPP.property.site_mode != 2 && TVAPP.user.likelyUser.getIsGuest() === 'true' ){
				//send guests through to settings page if site_mode==1
				window.location = destination;
			} else if ( TVAPP.user.getRegStatus() == "unregistered" ) {
				TVAPP.nextAction = function(){
					window.location = destination;
					TVAPP.nextAction = null;
				};
				j$(document).trigger("trackPage", { url: "/ga/ajax/header/SettingsUnregistered" });

				j$(document).trigger("registerClicked");
			} else {
				window.location = destination;
			}
		});

		j$(".jRecruiterInvite",area).bind("click",function(event){
			event.preventDefault();
			TVAPP.modal.open("invite_recruiter",{},{});
		});

		j$(".jPersonaEdit", area).click(function(event){
			event.preventDefault();
			j$("#jKeyName").clickover('forcehide');
			j$(document).trigger('persona_show_editor');
		});

		j$('.jPersonaReset', area).click(function(event){
			event.preventDefault();
			j$("#jKeyName").clickover('forcehide');
			j$(document).trigger('persona_reset');
		});

	};


	TVAPP.mobileMenuToggle = function() {
		var header = j$('.jHeader, #header_settings');

		if(!j$("body").hasClass("jMenuOn")) {

			if(!(j$(".jKeyPanel","#main_nav").length)) {
				j$("#main_nav").append(TVAPP.ajaxIncludeContent({template:"key_content"}));
				TVAPP.keyBindings(j$("#main_nav"));
			}


			j$("body").append("<div id='jMainToggleOverlay' class='toggle_overlay'></div>");
			if(j$('#notify-banner').length > 0){
				j$("#jMainToggleOverlay").animate({"top":j$('#notify-banner').outerHeight()});
			}
			j$("#nav_key_hldr").css({"display":"block","z-index":"800"}).animate({"left":"0"}, 400);
			j$("#boilerplate_wrapper").css({"position":"fixed","overflow":"visible","width":"100%","height":"100%"}).animate({"left":"85%"},400);
			j$(header).animate({"left":"85%"},400);
			j$("#jMainToggleOverlay").animate({"left":"85%"},400,function(){j$("#jMainToggleOverlay").click(TVAPP.mobileMenuToggle);});//,"opacity":"0.5"
			j$("body").addClass("jMenuOn");
		} else {
			j$("#nav_key_hldr").animate({"left":"-85%"}, 400,"easeInOutCirc",function(){/*j$("#nav_key_hldr").css({"display":"none"});*/});
			j$("#boilerplate_wrapper").animate({"left":"0"}, 400,"easeInOutCirc",function(){j$("#boilerplate_wrapper").css({"position":"static","overflow":"auto","width":"auto","height":"auto","top":"auto"});});
			j$(header).animate({"left":"0"},400,"easeInOutCirc");
			j$("#jMainToggleOverlay").animate({"left":"0"}, 400,"easeInOutCirc",function(){j$("#jMainToggleOverlay").remove();});//,"opacity":"0.0"
			j$("body").removeClass("jMenuOn");
		}

	};

	TVAPP.mobileMenuShareToggle = function() {
		if(!j$("body").hasClass("jMenuOn")) {
			j$("#right_bar").css({"display":"block","z-index":"800"}).animate({"left":"20%"}, 400);
			j$("#boilerplate_wrapper").css({"position":"fixed","overflow":"visible","width":"100%","height":"100%","top":0}).animate({"right":"80%"},400);
			j$("body").addClass("jMenuOn");
		} else {
			j$("#right_bar").animate({"left":"100%"}, 400,"easeInOutCirc",function(){j$("#right_bar").css({"display":"none"});});
			j$("#boilerplate_wrapper").animate({"right":"0"}, 400,"easeInOutCirc",function(){j$("#boilerplate_wrapper").css({"position":"static","overflow":"auto","width":"auto","height":"auto","top":"auto"});});
			j$("body").removeClass("jMenuOn");
		}

	};



	/*-- short link --*/
	var handleShareJobLink = function(e,data) {
		data = data || {};
		if( TVAPP.isEmpty(TVAPP.short_url) ) {
			if( j$(".jJobDetailId").length ) {
				j$.post(
					TVAPP.guid('/ajax/job_short_url'),
					{'Job.id': j$(".jJobDetailId").val()},
					function(result) {
						if(result.Status == "OK") {
							TVAPP.short_url = result.Result.job_short_url.toString();

							if(j$.browser.mobile) {
								TVAPP.modal.close();
								window.location = TVAPP.smDict('mobile.referral.mailto') + TVAPP.short_url;
							} else {
								TVAPP.modal.open('job_link_modal', {}, data);
							}
						} else {
							TVAPP.short_url = result.Error.GeneralError;
						}
					},
					'json'
				);
			}else{
				var link_url = data.link_url;
				if(TVAPP.isEmpty(data.link_url)) {
					link_url = window.location.href;
				}
				j$.post(
					TVAPP.guid('/ajax/links/refer'),
					{"url":link_url},
					function(result) {
						if(result.Status == "OK") {
							TVAPP.short_url = result.UserMessage;

							if(j$.browser.mobile) {
								TVAPP.modal.close();
								window.location = TVAPP.smDict('mobile.referral.mailto') + TVAPP.short_url;
							} else {
								TVAPP.modal.open('job_link_modal', {}, data);
							}

						} else {
							TVAPP.short_url = result.Error.GeneralError;
						}
					},
					'json'
				);
			}
		}else{//there is already a shortURL
			if(j$.browser.mobile) {
				TVAPP.modal.close();
				window.location = TVAPP.smDict('mobile.referral.mailto') + TVAPP.short_url;
			} else {
				TVAPP.modal.open('job_link_modal', {}, data);
			}
		}
	};

	var handleReferralLink = function(e,data) {
		data = data || {};
		j$.extend(data, { mode:"referralLink" });
		// if likely unregistered open registration modal & set next
		if (TVAPP.user.getIsGuest() == 'true' && TVAPP.user.likelyUser.getIsGuest() == 'true') { // partially logged in is ok
			// set next action and redirect to register
			j$.log('-> Redirect to register');
			TVAPP.modal.proceed = false;
			TVAPP.modal.nextAction = function() { j$(document).trigger('referralLink',data); };
			j$(document).bind("userInfoUpdated.modal.link", function() {
				if(TVAPP.user.getRegStatus() != "unregistered") {
					j$.log('<- Reattempt referral link');
					TVAPP.modal.proceed = true;
					TVAPP.modal.close();
					j$(document).unbind('.link');
				}
				else {
					j$.log('User Updated, not yet registered');
				}
			});
			j$(document).trigger('registerModal', data);
		// else load referal link modal
		} else {

			//TVAPP.modal.loadingStart();

			if(TVAPP.isEmpty(TVAPP.short_url) || data.type=='general') {
				if(j$(".jJobDetailId").length) {
					j$.post(
						TVAPP.guid('/ajax/job_short_url'),
						{'Job.id': j$(".jJobDetailId").val()},
						function(result) {
							if(result.Status == "OK") {
								TVAPP.short_url = result.Result.job_short_url.toString();

								if(j$.browser.mobile) {
									TVAPP.modal.close();
									window.location = TVAPP.smDict('mobile.referral.mailto') + TVAPP.short_url;
								} else {
									TVAPP.modal.open('referral_link_modal', {}, data);
								}

							} else {
								TVAPP.short_url = result.Error.GeneralError;
							}
						},
						'json'
					);
				}
				else {
					var link_url = data.link_url;

					if(TVAPP.isEmpty(data.link_url)) {
						link_url = window.location.href;
					}

					j$.post(
						TVAPP.guid('/ajax/links/refer'),
						{"url":link_url},
						function(result) {
							if(result.Status == "OK") {
								TVAPP.short_url = result.UserMessage;

								if(j$.browser.mobile) {
									TVAPP.modal.close();
									window.location = TVAPP.smDict('mobile.referral.mailto') + TVAPP.short_url;
								} else {
									if (data.type=='general') data.context="general=true";
									TVAPP.modal.open('referral_link_modal', {}, data);
								}

							} else {
								TVAPP.short_url = result.Error.GeneralError;
							}
						},
						'json'
					);
				}
			}
			else {
				if(j$.browser.mobile) {
					TVAPP.modal.close();
					window.location = TVAPP.smDict('mobile.referral.mailto') + TVAPP.short_url;
				} else {
					if (data.type=='general') data.context="general=true";
					TVAPP.modal.open('referral_link_modal', {}, data);
				}
			}

		}
	};

	var handleReferralLinkModalInitialize = function(e,data) {
		// tracking
		j$(document).trigger("trackEvent", { action: "Grab The Link", label: 'jClipModalOpen' });
		j$(document).trigger("trackPage", { url: "/ga/ajax/refer/GrabTheLink"});

		// local variables
		var modal = j$('#cboxLoadedContent');

		j$.log("Shorty URL = " + TVAPP.short_url);


		j$(".jShortLink",modal).val(TVAPP.short_url);







		j$('.jCopyBtn', modal).on('click', function(){
			copyToClipboard(j$('.jShortLink', modal));
			// show success/failure notification
			j$("body").modal({
				text : TVAPP.smDict('Refer.Modal.Link.success'),
				onClose: TVAPP.modal.close(true)













			});
		});


		function copyToClipboard(elem) {
			// focus element to be copied
			elem.focus();
			elem[0].setSelectionRange(0, j$(elem).val().length);
			
			// copy content of target element
			document.execCommand('copy');
		}
		
		if(data.type=='general') TVAPP.short_url = '';
	};

	var handleShareJobLinkModalInitialize = function(e,data) {
		// tracking
		j$(document).trigger("trackEvent", { action: "Grab The Link", label: 'jClipModalOpen' });
		j$(document).trigger("trackPage", { url: "/ga/ajax/refer/GrabTheLink"});

		// local variables
		var modal = j$('#cboxLoadedContent');

		j$.log("Shorty URL = " + TVAPP.short_url);


		j$(".jShortLink",modal).val(TVAPP.short_url);














		








		j$('.jCopyBtn', modal).on('click', function(){
			copyToClipboard(j$('.jShortLink', modal));
			// show success notification
			j$("body").modal({
				text : TVAPP.smDict('Refer.Modal.Link.success'),
				onClose: TVAPP.modal.close(true)
			});
		});

		
		function copyToClipboard(elem) {
			// focus element to be copied
			elem.focus();
			elem[0].setSelectionRange(0, j$(elem).val().length);
			
			// copy content of target element
			document.execCommand('copy');
		}
	};

	j$(document).bind('referralLink', handleReferralLink);
	j$(document).bind('referral_link_modal_init', handleReferralLinkModalInitialize);
	j$(document).bind('shareJobLink' , handleShareJobLink);
	j$(document).bind('job_link_modal_init', handleShareJobLinkModalInitialize);
	/*-- short link --*/

	TVAPP.refreshUserBindings = function(){
		selectCurrPageInNav();

		j$("#jLoginPopoverBtn").clickover({
			placement:'bottom',
			title:"login_pops",
			content:TVAPP.ajaxIncludeContent({template:"login_content"}),
			animation:false,
			onShown: function(){
				TVAPP.loginWelcomeBindings();
			},
			onHidden: function() {
				this.$element.focus();
			},
			global_close: false
		});

		j$("#jKeyName").clickover({
			placement:'bottom',
			title:"user_key_pops",
			content:TVAPP.ajaxIncludeContent({template:"key_content"}),
			animation:false,
			onShown: function(){
				TVAPP.keyBindings(j$(".user_key_pops"));
			},
			global_close: true
		});

		// Change Settings drop-down to button if Settings is only option in menu
		var key_name = j$("#jKeyName");
		key_name.clickover('show');
		var menu_opt = key_name.next('.user_key_pops').find('.menu_hldr .menu_opt'),
			settings_opt = menu_opt.children('.jSettings');
		if (menu_opt.length == 1 && settings_opt.length == 1) {
			settings_opt.insertAfter(key_name).addClass('settings_btn gray_btn');
			key_name.clickover('forcehide');
			key_name.remove();
		} else {
			key_name.clickover('forcehide');
		}

		j$("#jLoginPopoverBtn").click(function(e){
			if(j$("body").hasClass("mobile")) {
				e.stopPropagation();
				j$(this).clickover('forcehide');
				j$(document).trigger("loginClicked", {action: e.currentTarget});
				//j$(document).trigger('l');
			}
		});
		j$("#jAreYouEmp").click(function(e){
			e.stopPropagation();
			j$("#key_login_hldr_emp").hide();
			j$("#key_login_hldr").show();
			//TVAPP.createCookie('areYouEmp',true,1);
			TVAPP.createlocalStorageElement('isEmp','true');

			
		});
		j$("#jIamNotEmp").click(function(e){
			e.stopPropagation();
			j$("#key_login_hldr").hide();
			j$("#key_login_hldr_emp").show();
			//TVAPP.createCookie('areYouEmp',false,1);
			TVAPP.createlocalStorageElement('isEmp','false');
		});

		j$("#jKeyName").click(function(e){
			if(j$("body").hasClass("mobile")) {
				e.stopPropagation();
				j$(this).clickover('forcehide');
				//Do nothing - Evan
			}
		});

		TVAPP.loginWelcomeBindings();

		// promo_talent_community button on Job Details page
		j$("#jCommunityModal, .jCommunityModal", "#content").unbind('click').click(function(event){
			var preselect = '';
			if(j$(this).attr('data-category-id')) {
				preselect += ( preselect ? '&' : '') + 'job_category_selected=' + j$(this).attr('data-category-id');
			}
			if(j$(this).attr('data-location-id')) {
				preselect += ( preselect ? '&' : '') + 'job_location_selected=' + j$(this).attr('data-location-id');
			}
			if(j$(this).attr('data-company-id')) {
				preselect += ( preselect ? '&' : '') + 'job_company_selected=' + j$(this).attr('data-company-id');
			}
			TVAPP.login.bindRegister({mode:"register"});
			TVAPP.modal.open("register_modal_tc",{},{mode:'register',context:preselect, action: event.currentTarget});
		});


		j$(".jChannelIcon_facebook,.jChannelIcon_twitter,.jChannelIcon_linkedin")
			.click(function(event){
				event.preventDefault();
				TVAPP.login[j$(this).attr('data-channel')]({click_event: event});
			})
			.each(function(){
				if (j$(this).hasClass("custom_tooltip")) {
					j$(this).tooltip({
						placement:'bottom',
						title:TVAPP.smDict('SocialNetwork.TooltipText.'+j$(this).attr('id').substring(7))
					});
				}
			});

		j$('.jComingSoon').clickover({
			placement: 'top',
			title: "coming_soon_pops",
			content: '<span class="entypo icn">'+TVAPP.smDict('entypo.new')+'</span>'+TVAPP.smDict('global.coming_soon'),
			animation: true,
			html: true
		});

		if(j$("body").hasClass("mobile") && j$("body").hasClass("jMenuOn")) {  //For when user logs in and menu is open on mobile (MAY NEED REFACTORING CAUSE I Don't LOVE IT) - Evan

			if(!(j$(".jKeyPanel","#main_nav").length)) {

				j$("#main_nav").append(TVAPP.ajaxIncludeContent({template:"key_content"}));
				TVAPP.keyBindings(j$("#main_nav"));
			}
		}

		var showSignUpButtonGroup = function() {

			var signupSection = j$('#key_login_hldr');
			var signupEmpSection = j$('#key_login_hldr_emp');

			if(signupSection && signupSection.length===0 && signupEmpSection && signupEmpSection.length===0) {
				return;
			} else if((signupSection && signupSection.is(":visible")) || (signupEmpSection && signupEmpSection.is(":visible"))) {
				return;
			} else {
				if (signupSection) {
					signupSection.show();
				}
			}
		};

		TVAPP.sessionTimeout();
		j$.log("desktop.js refresh");

		showSignUpButtonGroup();

	};
	j$(document).bind("refreshUserBindings",TVAPP.refreshUserBindings);

	TVAPP.refreshBlockBindings = function ($scope) {

		$scope = $scope || j$('.jBlockRegion');

		// my referral activity block module
		j$('.jShortLinkRight', $scope).click(function(event) {
			event.preventDefault();
			j$.log('Referral Link Click');
			j$(document).trigger('referralLink', {click_event: event});
		});
		j$(".jStatLinks", $scope).click(function() {
			if (j$('.jStatNum', this).text() > 0) TVAPP.modal.open('stat-link-table', {}, {});
		});

		j$(".jStatClicks", $scope).click(function() {
			if (j$('.jStatNum', this).text() > 0) TVAPP.modal.open('stat-click-table', {}, {});
		});

		j$(".jStatCandidates", $scope).click(function() {
			if (j$('.jStatNum', this).text() > 0) TVAPP.modal.open('stat-candidate-table', {}, {});
		});

		// top referrer block module
		j$(".jTopReferRow", $scope).click(function() {
			// remove popover if already exists
			if( j$('.jTopReferPopover', $scope).length ) {
				j$('.jTopReferPopover', $scope).fadeOut(
					300,
					function(){
						j$('.jTopReferPopover', $scope).remove();
					}
				);
				return false;
			}
			
			if(!j$(".jTopReferPopover", $scope).length) {
				var $popover = j$("<div class='my_ref_popover top_ref_popover jTopReferPopover'><div class='topover_content jTopReferPopoverContent'></div></div>");

				j$(this).append($popover);

				var top_referrer_id = j$(".jTopId",this).text();

				var contentHTML = contentHTML = TVAPP.smLoadContentFromServer("top-refer-stats-content","User.id="+top_referrer_id);

				j$(".jTopReferPopoverContent", $popover).html( contentHTML );

				$popover.css("top",-($popover.outerHeight())/2).fadeIn(300);

				var inside_topreferpop = false;

				$popover.hover(function(){
					inside_topreferpop = true;
				}, function(){
					inside_topreferpop = false;
				});

				j$("html").mouseup(function(){
					if(!inside_topreferpop) {
						$popover.fadeOut(
							300,
							function(){
								$popover.remove();
							}
						);
					}
				});
			}
		});

		// activity feed block module
		if(j$(".jTotalRecommend", $scope).length) {
			j$('<div>', {
				'class': 'job-share-count',
				text: j$(".jTotalRecommend", $scope).text()
			}).appendTo('.jTotalCounter', $scope);
		}

		// previous searches block module
		j$('.jPreviousSearches', $scope).on('click', '.jSearchLink', function(event) {
			event.preventDefault();
			job_search_id = j$(this).data('jsid')
			var data = {'job_search_id':job_search_id};
			j$(document).trigger('loadingState',data);
			j$(document).trigger('loadSearchResults',data);
		});

		// promo_facebook_quickshare block module
		var basic_page_url = TVAPP.property.demo_mode ? TVAPP.property.demo_url : TVAPP.property.site_name + TVAPP.property.referrer_code_prefix;
		j$(".jFacebookPostBtn", $scope).on('click', function(event) {
			if(FB) {
				FB.ui({
					method:'share',
					href:basic_page_url
				},function(response){
					j$(document).trigger("trackPage", { url: "/ga/ajax/portal/QuickShareFacebook"});
					if (TVAPP.property.demo_mode) {
						j$.log(response);
						j$('body').modal({text:'Site is in demo mode. Shared url is "'+basic_page_url+'"', modalWidth:500});
					}
				});
			} else {
				TVAPP.facebook_loading();
			}
		});

		// promo_recommend_friend block module
		j$(".jRecommendFriend", $scope).clickover({
			placement: j$(".jRecommendFriend", $scope).data('direction'),
			title: "recommend_pops",
			content: TVAPP.ajaxIncludeContent({template:"recommend_friend_popover"}),
			html: true,
			animation: false,
			onShown: function() {
				// bind each popover action
				j$('.jRecommendLink', $scope).on('click', function(e) {
					e.preventDefault();
					j$(".jRecommendFriend", $scope).clickover('forcehide');
					var url = window.location.protocol+'//'+window.location.hostname+window.location.pathname+'#modal_candidate';
					j$(document).trigger('referralLink', {type:'general',link_url:url});
				});
				j$('.jRecommendDirect', $scope).on('click', function(e) {
					e.preventDefault();
					j$(".jRecommendFriend", $scope).clickover('forcehide');
					j$(document).trigger('generalCandidate',{type:'referFriend'});
				});
				j$('.jReferralLink', $scope).on('click', function(e) {
					e.preventDefault();
					j$(".jRecommendFriend", $scope).clickover('forcehide');
					j$(document).trigger('referralLink', {click_event: e});
				});
				TVAPP.trapFocusToMenuItems(this);
			}
		});

		// promo_talent_community block module
		j$("#jCommunityModal, .jCommunityModal", $scope).unbind('click').click(function(event){
			var preselect = '';
			if(j$(this).attr('data-category-id')) {
				preselect += ( preselect ? '&' : '') + 'job_category_selected=' + j$(this).attr('data-category-id');
			}
			if(j$(this).attr('data-location-id')) {
				preselect += ( preselect ? '&' : '') + 'job_location_selected=' + j$(this).attr('data-location-id');
			}
			if(j$(this).attr('data-company-id')) {
				preselect += ( preselect ? '&' : '') + 'job_company_selected=' + j$(this).attr('data-company-id');
			}
			TVAPP.login.bindRegister({mode:"register"});
			TVAPP.modal.open("register_modal_tc",{},{mode:'register',context:preselect, action: event.currentTarget});
		});

		// category_page_tiles block module
		j$('.jCatLink', $scope).each(function(){
			if( j$('.jCatTitle', this).width() > 285){
				j$(this).hover(
					function(){
						j$('.jCatTitle',this).animate({left: '-' + (j$('.jCatTitle',this).outerWidth() - 285) +'px' },1000);},
					function(){ j$('.jCatTitle',this).animate({left:'0'},350); }
				);
			}
		});

		// job_list_promo block module
		j$('.jReferralLink', $scope).unbind('click').click(function(event){
			event.preventDefault();
			j$(document).trigger('referralLink',{click_event:event});
		});

		j$('.jResultsWidgetBtn', $scope).on('click',function(event){
			event.preventDefault();
			var search_id = '?search_id=' + j$('.jResultsActive').data('jsid'),
				search_keywords = '&search_keywords=' + j$('.jResultsActive').data('keywords'),
				search_location = '&search_location=' + j$('.jResultsActive').data('location-string-short');

			window.open(TVAPP.property.site_name + '/config/widget' + search_id + search_keywords + search_location, '_blank');
		});

		j$('.jCreatePageBtn', $scope).on('click',function(event){
			event.preventDefault();
			TVAPP.modal.open('create_custom_page_modal', {width:450},{ search_id : j$('.jResultsActive').data('jsid') });
		});
		addAriaForAllCapsules();
	};
	j$(document).bind("refreshBlockBindings",function(event,data) { TVAPP.refreshBlockBindings(data); });


	var handleRegisterTCInitialize = function(e, data) {
		data = data || {};
		var modal = j$('#cboxLoadedContent');

		if(!TVAPP.isEmpty(TVAPP.property.job)) {
			if(j$("#user_locations_tc option[value='"+TVAPP.property.job.location.id+"']",modal).length) {
				j$("#user_locations_tc option[value='"+TVAPP.property.job.location.id+"']",modal).attr("selected","selected");
				j$("#user_locations_tc").trigger("liszt:updated");
			}
			if(j$("#user_interests_tc option[value='"+TVAPP.property.job.category.id+"']",modal).length) {
				j$("#user_interests_tc option[value='"+TVAPP.property.job.category.id+"']",modal).attr("selected","selected");
				j$("#user_interests_tc").trigger("liszt:updated");
			}
			setTimeout(
				function() { j$.colorbox.resize();},
				20
			);
		}

		TVAPP.chosenPostProcessor(j$('#user_interests_tc'));
	
		if(j$('.jPreSelect', modal).length) {
			j$('.jPreSelect', modal).each(function() {
				if( j$(this).val().indexOf('|') === -1 ){//check for location landing page pre-fill
					j$('#'+j$(this).attr('data-field')).find('option[value="'+j$(this).val()+'"]').attr('selected','selected');
				}else{// multiple location values will be matched
					var val_array = j$(this).val().split('|');
					for( var i=0; i < val_array.length; i++){
						if( !TVAPP.isEmpty(val_array[i]) ){
							j$( '#'+ j$(this).attr('data-field') ).find('option[value="'+ val_array[i] +'"]').attr('selected','selected');
						}
					}
				}
				j$('#'+j$(this).attr('data-field')).trigger("liszt:updated");
			});
			setTimeout(function() { j$.colorbox.resize();}, 20);
		}

		j$("#user_locations_tc,#user_interests_tc,#user_companies_tc",modal).bind("change",function(e){
			setTimeout(
				function() { j$.colorbox.resize();},
				20
			);
		});

		j$('.jTermsConditionsModal', modal).click(function(e) {
			e.preventDefault();
			TVAPP.modal.open("terms_cond_modal_tc", {}, {saveState: true, action: e.currentTarget});
		});
		j$('.jTermsConditionsModal').attr("title",j$('.jTermsConditionsModal').text());

		j$(".jRegisterTCSubmit").click(function(event) {
			TVAPP.user.registerSubmit(event, data);
		});
		/* Hierarchical Location Selectors */
		j$('.jLocationLevelContainer', modal).hierarchicalLocationSelect();
		j$.colorbox.resize();
		j$(modal).on("change", ".jLocationLevelContainer select", function(e){
			setTimeout(function(){ j$.colorbox.resize(); }, 20 );
		});
		j$(".jAddLocation", modal).on('click', function(e){
			e.currentTarget.focus();
			setTimeout(function(){ e.preventDefault(); j$.colorbox.resize();}, 20,e);
			
		});
		j$(".jClearSelector, .jRemoveLocation", modal).on('click', function(e){
			setTimeout(function(){ e.preventDefault(); j$.colorbox.resize();}, 20,e);
		});
	};

	j$(document).bind("register_modal_tc_init", handleRegisterTCInitialize);

	TVAPP.setBindings = function(){
		j$('.jLocationSearch, .jCategorySearch').keydown(function(e){
			if (e.keyCode != '13' && e.keyCode != '37' && e.keyCode != '38' && e.keyCode != '39' && e.keyCode != '40' && e.keyCode != '9' && e.keyCode != '16' && e.keyCode != '17' && e.keyCode != '18' && e.keyCode != '224') {
				j$(this).removeClass("jExactSearch");
			}
		});

		j$(document).on('click', '.jHelpSecurityModalLink',function(){
			j$(".jHelpSecurity").show();

			var modal = j$(".jModalHelp");
			modal.find(".jHelpWorksLink").bind("click",function(){
				j$(".jHelpWorks", modal).show();
			});

			modal.find(".jHelpSecurityLink").bind("click",function(){
				j$(".jHelpBonus", modal).hide();
				j$(".jHelpSecurity", modal).show();
			});

			modal.find(".jHelpBonusLink").bind("click",function(){
				j$(".jHelpSecurity", modal).hide();
				j$(".jHelpBonus", modal).show();
			});

			TVAPP.openRecip(modal);
		});

	};

	// notification for facebook api calls before it has initialized
	TVAPP.facebook_loading = function() {
		j$('body').modal({ text: (TVAPP.property.FacebookJSAPI === false) ? TVAPP.smDict('Channel.Facebook.error_message') : TVAPP.smDict('Channel.Facebook.loading_message') });
	};

	/*	Use this to generate an event tracker for use in the url
	 * 	event:		the name of your event as a string
	 * 	data:	 	object that holds 'target_bo_id' and 'target_bo_name' (e.g. {'target_bo_id':'131','target_bo_name':'LandingPage'} )
	 *	success:	callback function that receives the tracker string as result.UserMessage
	 */
	TVAPP.eventTracker = function(event,data,success) {
		j$.ajax({
			url: "/ajax/events/" + event + "/track",
			data: data,
			success: function(result){
				success(result);
				j$.log("Tracked: " + event);
			},
			dataType: 'json'
		});
	}


	TVAPP.pageInit = function() {

		TVAPP.browserVer();
		if(window.ie6) {
			// This is better than using window.location = if you don't want the originating page to show up in the session history,
			// meaning the user won't get stuck in a never-ending back-button fiasco.
			window.location.replace("/incompatible-browser");
		}
		if (TVAPP.readCookie("redirect_url")) {
			window.location = TVAPP.readCookie("redirect_url");
			TVAPP.deleteCookie("redirect_url");
		}
		TVAPP.browserDetect.init();
		window.j$.client = {
			os: TVAPP.browserDetect.OS,
			browser: TVAPP.browserDetect.browser
		};

		j$("body")
			.addClass(j$.client.os.toLowerCase())
			.addClass(j$.client.browser.toLowerCase());

		TVAPP.property.docTitle = j$('title').text(); // store data for ie 7&8 bug fix.

		TVAPP.refreshUserBindings();
		TVAPP.refreshBlockBindings();

		TVAPP.user.init();

		TVAPP.stylisticChoices();
		j$(window).resize(TVAPP.stylisticChoices);

		j$(document).on('click', '.jCloseModal', function(){
			j$(".jModal").fadeOut(600);
			j$("#overlay").fadeOut("slow", function(){
				j$(this).hide();
				j$(".jApplyTitle").hide();
				j$(".modal_box iframe").remove();
			});
		});

		TVAPP.setBindings();

		j$("#jMenuToggle").click(TVAPP.mobileMenuToggle);
		j$("#jMenuShareToggle").click(TVAPP.mobileMenuShareToggle);

		j$(".jSearch input[name=keywords]").placeholder();

		j$.widget( "custom.catcomplete", j$.ui.autocomplete, {
			_renderMenu: function( ul, items ) {
				ul.attr("id","jobsearch");
				var self = this,
					currentCategory = "";
				j$.each( items, function( index, item ) {
					if (item.attribute.substring(4) != currentCategory ) {
						if (item.attribute.substring(4) != "all") {
							ul.append( "<li class='ui-autocomplete-category'><div>Browse results by "+ item.attribute.substring(4) +"</div></li>" );
							currentCategory = item.attribute.substring(4);
						}
					}
					self._renderItem( ul, item );
				});
			},
			_renderItem: function( ul, item ) {
				var bucket = item.attribute.substring(4);

				if (j$(".li_"+ bucket, ul).length < 5) {
					var match = (item.match != "null") ? item.match : "";
					var tmp;

					if (bucket == "all") {
						if (j$(".li_location, .li_category", ul).length) {
							tmp = j$('<li class="ui-autocomplete-viewall"></li>').append('<a href="#">Run a keyword search for "' + match + '"</a>');
						} else {
							return false;
						}
					} else {
						tmp = j$( '<li class="li_'+ bucket +'"></li>').append("<a href='#'>" + match + "</a>");
					}
					tmp.data( "ui-autocomplete-item", item ).appendTo( ul );
					return tmp;
				}
			}
		});

		j$(".jSearch input[name=keywords]").catcomplete({
			minLength: 2,
			source: function(request, response) {
				j$.log("REQUEST: "+ JSON.stringify(request));
				var holdit = [],
					count = 0;

				if(!TVAPP.property.geoSearch) { // if geoLocation search is on, do not suggest locations
					j$.post(
						'/ajax/jobs/search/location/auto-suggest?keywords='+encodeURIComponent(j$.trim(request.term)), {},
						function(result) {
							if (result.Status == "OK") {j$.merge(holdit, result.Result);}
							else {j$.merge(holdit, result.Error.GeneralError);}
							j$.log("holdit 1: " + JSON.stringify(holdit));
							count++;
							if (count==2) {
								j$.merge(holdit, [{"attribute":"Job.all", "match":encodeURIComponent(request.term)}]);
								response(holdit);
							}
						},
						'json'
					);
				}

				j$.post(
					'/ajax/jobs/search/category/auto-suggest?keywords='+encodeURIComponent(request.term), {},
					function(result) {
						if (result.Status == "OK") {j$.merge(holdit, result.Result);}
						else {j$.merge(holdit, result.Error.GeneralError);}
						j$.log("holdit 2: " + JSON.stringify(holdit));
						count++;
						if (count==2 || TVAPP.property.geoSearch) {
							j$.merge(holdit, [{"attribute":"Job.all", "match":encodeURIComponent(request.term)}]);
							response(holdit);
						}
					},
					'json'
				);
			},
			select: function(event, ui) {
				event.preventDefault();
				if (ui.item.attribute.substring(4) == "location") {
					j$(".jSearch input[name=keywords]").val("");
					j$(".jSearch input[name=location_ids]").val(ui.item.match_id);
				} else {
					j$(".jSearch input[name=keywords]").val(ui.item.match);
				}

				TVAPP.handleJobSearch();
				j$(".jSearch input[name=keywords]").val(ui.item.match);
				return false;
			},
			open: function(event, ui) {
				if (!j$(".li_location, .li_category").length) {
					j$(".jSearch input[name=keywords]").catcomplete("close");
					return false;
				}

				j$("#jobsearch").css('top',function(index, value) {return 3+parseInt(value)}); // Push menu down 3px


			}
		});

		if (j$.browser.msie) {
			j$(".jSearch").append(j$('<div id="ie_searchbg_fix">').hide());
			j$(".jSearch input[name=keywords]")
				.focus(function(){j$("#ie_searchbg_fix").show();})
				.blur(function(){
					if (j$(".jSearch input[name=keywords]").val() == "" || j$(".jSearch input[name=keywords]").val() == j$(".jSearch input[name=keywords]").attr("placeholder")) {
						j$("#ie_searchbg_fix").hide();
					}
				});
		}

		j$(".jSearch form").bind("submit", TVAPP.handleJobSearch);

		if (j$("#report_summary").length || j$("#report_referrals").length || j$("#report_applications").length) {
			j$("body").addClass("admin");
		}

		if(!(typeof customJS === 'undefined')) {
			customJS();
		}

		processFlashForWin();

		//j$.datepicker.setDefaults({dateFormat:TVAPP.property.date_format});
	};

	j$(document).bind("trackEvent", function(e, data){
		asTrackEvent(j$(document).triggerHandler("logCurrentMode"),data.action,data.label);
		j$.log("Tracking Event: " + j$(document).triggerHandler("logCurrentMode") + " | " + data.action +" | " + data.label);
	});

	j$(document).bind("trackPage", function(e, data){
		asTrackPageview(data.url);
		j$.log("Tracking Page: " +data.url);
	});

	var handleAgentLearnInitialize = function(e, data) {
		data = data || {};

		$LAB.script("/stepModal.js?v="+TVAPP.property.version_num).wait(function(){
			j$("#jModalAgentLearn").stepModal();
		});

	};

	j$(document).bind("agent_learn_init", handleAgentLearnInitialize);

	/* NOTIFICATION BAR:
		(1) To trigger: "value",	TVAPP.notify.open(content,options)
			content:	(html as string) *required
			options:	(object) Takes the following options:
			color:				(string) css value for text color (default = '#ffffff' white)
			backgroundColor:	(string) for the notify bar color (default = '#595959' dark gray)
			autoClose:			(number) milliseconds until the bar closes itself. 0 (default) adds a close button
			iconClass:			(string) class name for Notify element (control the style of icon, and anything you might need). Empty string = no icon
			iconContent:		(string) the content / entypo entity for the left icon
		(2) Make sure you have styles ready for any entypo options you pass (via iconClass / e.g., content, color)
	*/
	TVAPP.notify = {
		defaults : {
			color : '#ffffff',
			backgroundColor : '#595959',
			iconClass: 'info',
			iconContent: '&#x2139;',
			autoClose : 0
		},
		open : function(content, options){
			// dependency checks
			if( !content ){
				j$.log('No content for Notification. -aborting');
				return false;
			}
			if ( j$('#notify').length ){
				j$.log('Notify instance detected. -aborting');
				return false
			}
			// process conditionals
			var settings = options ? j$.extend( true, TVAPP.notify.defaults, options ) : TVAPP.notify.defaults;
			var notifyBar = j$('<div id="notify" class="hidden ' + settings.iconClass + '"><div id="notify_container"><span class="content"></span></div></div>');
			j$(notifyBar).css({ 'color': settings.color , 'background-color': settings.backgroundColor });
			var closeBox = '<button class="icon entypo close jCloseNotify" role="button" aria-label="' + TVAPP.smDict('global.close') + '">' + TVAPP.smDict('entypo.multiplication_sign') + '</button>';

			if(settings.iconClass != '' && settings.iconContent != ''){
				var iconBox = '<span class="icon entypo">' + settings.iconContent + '</span>';
			}else{
				var iconBox = '';
				j$('.content' , notifyBar).addClass('first');
			}

			if( settings.autoClose == 0 ){
				j$('#notify_container' , notifyBar).append( closeBox ).prepend( iconBox );
				j$('.jCloseNotify' , notifyBar).on('click' , function(e){
					TVAPP.property.show_locale_list = 'false';
					TVAPP.notify.close();
				});
			}
			j$('.content' , notifyBar).html(content);
			// add to the DOM
			if( j$('body.mobile').length ){
				j$('#container').prepend(notifyBar);
			}else{
				j$('body').prepend(notifyBar);
			}
			// add slight delay to allow rendering
			setTimeout(function(){
				j$('#notify').removeClass('hidden').addClass('shown');
				if(settings.autoClose > 0){
					setTimeout(function(){
						TVAPP.notify.close();
					} , settings.autoClose);
				}
			}, 300);
		},
		close : function(){
			if( j$("#notify").length ){
				j$('#notify').removeClass('shown').addClass('hidden');
				setTimeout(function(){ j$('#notify').remove(); }, 800);
			}
		}
	};

		
	TVAPP.cookieNotifier = function(type) {
		this.type = type || 'none'; 
		this.defaults = {
			color : '#ffffff',
			backgroundColor : '#595959',
			iconClass: 'info',
			iconContent: '&#x2139;',
			autoClose : 0
		};		
	};

	TVAPP.cookieNotifier.prototype = function() {
		function _openBanner(content, settings, instance) {
			var notifyElement = j$('<div>', {
				'id': 'notify-banner',
				'class': 'hidden'
			});

			notifyElement.append(j$('<div>', {
				'id': 'notify_container',
				'aria-label': content
			}));

			notifyElement.find('#notify_container').append(j$('<div>', {
				'class': 'content'
			}));

			j$(notifyElement).css({
				'color': settings.color, 
				'background-color': settings.backgroundColor
			});

			var closeBox = '<button class="icon entypo close jCloseNotify" role="button" aria-label="' + TVAPP.smDict('global.close') + '">' + TVAPP.smDict('entypo.multiplication_sign') + '</button>';
			j$('#notify_container' , notifyElement).append( closeBox );

			j$('.content' , notifyElement).html(content);
			
			
			//create a dummy div to push the page down
			var dummyEle = j$('<div>', {
				'id': 'notify-no-content',
				'class' : 'notify-no-content'
			});
			
			j$(notifyElement).prependTo('body');
			
			var banner_height = j$('#notify_container', notifyElement).outerHeight();
			
			if(!(j$('body').hasClass('mobile'))) {
				j$(dummyEle).prependTo('body').animate({
					'height' : j$('#notify_container', notifyElement).outerHeight() + 20 +'px'
				}, 3000);
			}
			else{
				j$(dummyEle).prependTo('body').animate({
					'height' : banner_height + 20 +'px'
				}, 3000);
				j$('.jHeader , #nav_key_hldr').animate({
					'top' : banner_height + 20 + 'px'
				}, 3000);
				j$('#header_settings').animate({
					'top' : banner_height + 75 + 'px'
				}, 3000);
			}
			j$(window).on('orientationchange', function(event){
				if(j$('body').hasClass('mobile') && !TVAPP.readCookie('Cookie-Accept')) {
					if(screen.orientation.type.startsWith('landscape')){banner_height = j$('#notify_container', notifyElement).outerHeight(); }
					else{banner_height = j$('#notify_container', notifyElement).outerHeight(); }
					j$(dummyEle).animate({
						'height' : banner_height + 20 +'px'
					}, 3000);
					j$('.jHeader , #nav_key_hldr').animate({
						'top' : banner_height + 20 + 'px'
					}, 3000);
					j$('#header_settings').animate({
						'top' : banner_height + 75 + 'px'
					}, 3000);
				}
			});
			
			j$('.jCloseNotify', notifyElement).unbind().bind('click', function(){
				instance.close();
			});
			
			setTimeout(function(){j$('#notify-banner').removeClass('hidden').addClass('shown');}, 300);
		}

		function _openModal(content, options, instance){
			var defaults = {
				closeButton: false,
				opacity: 0.5,
				width: 600,
				initialWidth: 50,
				initialHeight: 50,
				overlayClose: false,
				escKey: false,
				onClosed : function() {
					var value = TVAPP.property.site.id;
					if( TVAPP.readCookie('Cookie-Accept') ) {
						value = TVAPP.readCookie('Cookie-Accept') + '|' + value;
					}
					TVAPP.createCookie('Cookie-Accept', value, 90);
					window.location.reload(true);
				}
			};
			
			var notifyElement = j$('<div>', {
				id: 'notify-modal',
				'class': 'notify-modal-container'
			});
			
			notifyElement.append(j$('<div><h3>', {
				'class': 'title modal_title'
			}));
			
			notifyElement.append(j$('<div>', {
				'class': 'modal_content'
			}));
			
			notifyElement.append(j$('<div>', {
				'class': 'footer modal_actions'
			}));
			
			
			notifyElement.find('h3').html(TVAPP.smDict("CookieNotifier.label.modal.title")).parent().addClass('title modal_title');
			notifyElement.find('.modal_content').html(content);
			notifyElement.find('.footer').append(j$('<button>', {
				'class': 'jCloseNotifyModal primary_btn',
				'text': TVAPP.smDict("global.label.accept")
			}));
			
			var settings = options ? j$.extend( true, defaults, options ) : defaults;
			settings.html = notifyElement.get(0).outerHTML; // setting colorbox settngs.html property as a html text
			j$.colorbox(settings);
			
			j$('.jCloseNotifyModal').unbind().bind('click', function(){
				instance.close();
			});
		}

		function _closeBanner() {
			var value = TVAPP.property.site.id;
			
			if( TVAPP.readCookie('Cookie-Accept') ) {
				value = TVAPP.readCookie('Cookie-Accept') + '|' + value;
			}
			
			TVAPP.createCookie('Cookie-Accept', value, 90);
			
			if( j$("#notify-banner").length ){
				j$('#notify-banner').animate({
					top : '-35px'
				}, {
					duration: 1000,
					easing: 'linear',
					start: function() {
						j$('#notify-no-content').animate({
							'height' : '0px'
						}, {
							duration: 2000,
							easing: 'linear'
						});
						j$('.jHeader , #nav_key_hldr').animate({
							'top' : '0px'
						}, {
							duration: 2000,
							easing: 'linear'
						});
						j$('#header_settings').animate({
							'top' : '55px'
						}, {
							duration: 2000,
							easing: 'linear'
						});
					},
					complete : function() {
						j$('#notify-banner, #notify-no-content').remove();
					}
				});
			}
		}

		function _closeModal() {
			j$.colorbox.close();
		}

		function open(content, options){
			if( !content ){
				j$.log('No content for Notification. -aborting');
				return false;
			}

			if ( j$('#notify').length ){
				j$.log('Notify instance detected. -aborting');
				return false;
			}

			var settings = options ? j$.extend( true, this.defaults, options ) : this.defaults;

			switch(this.type) {
				case 'banner': {
					_openBanner(content, settings, this);
				}
				break;

				case 'modal': {
					_openModal(content, settings, this);
				}
				break;

				default: {
					j$.log('No notifier type specified');
					return;
				}
			}
		}

		function close() {
			switch(this.type) {
				case 'banner': {
					_closeBanner();
				}
				break;

				case 'modal': {
					_closeModal();
				}
				break;

				default: {
					j$.log('nothing to close');
				}
			}
		};

		return {
			open: open,
			close: close
		};
	}();
	
	function resizeHeaderSettings() {
		var header_settings_container = j$('#header_settings_container'),
			locale_select = j$('.jHeaderLocaleSelect', header_settings_container);
			var is_iPad = navigator.userAgent.match(/iPad/i); //check for iPad
		if ((j$('body').hasClass('mobile')) || (is_iPad == 'iPad')) {
			var key_hldr = j$('#key_hldr'),
				key_name_hldr = j$('#key_name_hldr', key_hldr),
				max_width = 80;

			locale_select.width('');
			key_name_hldr.width('');

			function computeMaxWidth() {
				max_width = header_settings_container.outerWidth() - key_hldr.outerWidth() - 2;

				if (j$('#header_settings_language > .globus').length > 0) {
					max_width = max_width - j$('#header_settings_language > .globus').outerWidth() - 30;
				}
			}
			computeMaxWidth();

			if (locale_select.width() > max_width) {
				if (key_name_hldr.length > 0) {
					var name_hldr_width = header_settings_container.outerWidth() - j$('#header_settings_language').outerWidth() - j$('#key_scl_hldr', key_hldr).outerWidth() - 30;

					name_hldr_width < 80 ? key_name_hldr.width(80) : key_name_hldr.width(name_hldr_width);

					computeMaxWidth();
				}

				if (locale_select.width() > max_width) {
					max_width < 80 ? locale_select.width(80) : locale_select.width(max_width);
				}
			}
		} else {
			locale_select.width(locale_select.width() + 55);
		}
	}
	j$(window).resize(resizeHeaderSettings);

	function initHeaderLocaleSelect() {
		var locale_select = j$('.jHeaderLocaleSelect');

		resizeHeaderSettings();

		if (locale_select.find('option[selected]')) locale_select.val(locale_select.find('option[selected]').val());

		locale_select.chosen({
			disable_search_threshold: 20,
			no_results_text: TVAPP.smDict('Chosen.no_results'),
			placeholder_text_multiple: TVAPP.smDict('Chosen.placeholder_text_multiple'),
			placeholder_text_single: TVAPP.smDict('Chosen.placeholder_text_single')
		}).change(function() {
			var data = {},
				url = '';

			if (TVAPP.user.getIsGuest() == "true") {
				data = { 'locale_id': j$(this).val() };
				url = '/ajax/user/update-guest-session-locale';
			} else {
				data = { 'User.locale_id': j$(this).val() };
				url = '/ajax/user/edit-info';
			}

			function changeLangSubmit() {
				j$.ajax({
					type: 'POST',
					url: TVAPP.guid(url),
					data: data,
					dataType: 'json',
					success: function(result) {
						if (result.Status === 'OK') {
							if (!j$('body').hasClass('job_list') || j$('#jResultsArea .jResultsContent').length < 1) {
								window.location.reload();
							} else {
								window.location = TVAPP.property.referrer_code_prefix + '/jobs/search';
							}
						}
					},
					error: function(xhr, textStatus, error) {
						if (xhr.status==400) {
							var result = JSON.parse(xhr.responseText);
							if (result.Errors['User.email']) {
								j$("body").modal({"text":result.Errors['User.email']});
							} else if (result.Errors['GENERIC_ERROR_STRING']) {
								j$("body").modal({"text":result.Errors['GENERIC_ERROR_STRING']});
							}
						} else {
							TVAPP.masterErrorHandler(xhr, textStatus, error, null);
						}
					},
					complete: function() {}
				});
			}

			/* Search results language switch modal has been reverted
			if (!j$('body').hasClass('job_list') || j$('#jResultsArea .jResultsContent').length < 1) {
				changeLangSubmit();
			} else {
				j$('body').modal({
					'text': 'Changing your language will clear your search criteria.',
					'btn_message': '<a class="jModalClose cancel_btn" href="#"><span class="btn_txt">Cancel</span></a><a class="jModalClose jChangeLangProceed generic_btn" href="#"><span class="btn_txt">Proceed</span></a>'
				});

				j$('.jChangeLangProceed').click(changeLangSubmit);
			}*/
			changeLangSubmit();
		});

		// ARIA handling for locale drop-down
		TVAPP.chosenPostProcessor(j$('.jHeaderLocaleSelect'));
		
		if (locale_select.hasClass('jJobAvailableLocalesLoop') && locale_select.find('option:disabled').length > 0) {
			if (!j$('body').hasClass('mobile')) {
				locale_select.on('liszt:showing_dropdown', function() {
					j$('.jJobLangDisabledMsg').css('display', 'inline-block');
				}).on('liszt:hiding_dropdown', function() {
					j$('.jJobLangDisabledMsg').css('display', '');
				});
			} else {
				j$('.jJobLangDisabledMsg').prependTo('#header_settings_container').css('display', 'block');
				j$('#container').css('margin-top', '+=20px');
			}
		}

		locale_select.prev('.globus').prependTo(locale_select.next('.chzn-container').children('.chzn-single'));
	}
	initHeaderLocaleSelect();
	j$(document).bind('refreshUserBindings', initHeaderLocaleSelect);
	
	var addAriaForAllCapsules = function(){
		j$("div#right_holder .block").each(function(index1, value1){		
			if ((j$('.capsule:visible', this).length && j$(".capsule .capsule_title h2", this).length && (typeof j$(".ghost", this).attr("id") === "undefined"))){

				if(j$('.capsule div.counter_content', this).length){
					j$(".capsule", this).attr("tabindex", "0").attr("aria-label",j$(".capsule div.capsule_title", this).text() + " " + j$(".capsule div.job-share-count", this).text().trim() + " " + j$(".capsule div.total_counter_text", this).text().trim());
				} else {
					j$(".capsule", this).attr("tabindex", "0").attr("aria-label",j$(".capsule div.capsule_title", this).text());
				}
				
				/* If buttons present in the section add accesibiity to it */
				if(!(j$(".capsule_row", this).length)){
					var capsuleContentId = "capsuleContent_"+index1;				
					j$(".capsule_content p", this).attr("id", capsuleContentId);
					j$("a.flat_btn", this).attr("aria-describedby", capsuleContentId);	//aria-descby for buttons in right_holder
				}				

				/* Previous searches, similar Listings, and others */
				var ariaId = j$(".capsule", this).attr("id");
				j$(".capsule_row", this).each(function(index2, value2){
					var buttonId = ariaId+"_row_" + index1 + "_" + index2;
					j$(this).attr("id", buttonId);				

					var locationTitleContent = j$(".jSearchLocation", this).attr("title");
					var locId = "locationTitle_" + index1 + "_" + index2;

					if((typeof locationTitleContent !== "undefined")){	
						var searchLocText = j$(".jSearchLocation", this).text().trim();
						if(locationTitleContent !== searchLocText){
							locationTitleContent = searchLocText + " " + locationTitleContent.trim();
						}					
						
						if(!(j$("#" + locId).length)){					
							j$(this).append(j$('<span></span>').text(locationTitleContent).attr({'id':locId}).css("display", "none"));
						}
						j$("a.link_title", this).attr("aria-describedby", locId);	//aria-descby for all hyperlinks in right_holder
					} else {
						j$("a.link_title", this).attr("aria-describedby", buttonId);
					}
				});
			}
			/* Activity Feed */
			
			j$("span.activity_text", this).each(function(index2, value2){
				var linkId = "link_row_" + index1 + "_" + index2;
				j$(this).attr("id", linkId);
				j$("a", this).attr("aria-describedby", linkId);			//aria-descby for all hyperlinks in activity feeds in right_holder
			});
		});
	}
})(jQuery);

/* Cookie storing permission (TEC-861)*/
(function() {
//	if( !(TVAPP.readCookie('Cookie-Accept') == TVAPP.property.site.id) ) {
	/* Not show banner/modal for config/leafzone/site preview pages */
	if((j$('body[id^="config"]').length === 0) && (j$('body[id^="smadmin"]').length === 0) && (j$('body[id^="_draft"]').length === 0)){
		if( !(TVAPP.readCookie('Cookie-Accept') && TVAPP.readCookie('Cookie-Accept').split('|').indexOf(TVAPP.property.site.id) != -1) ) {
			var criteria = TVAPP.property.site_cookie_acceptance;
			var notifyInstance = new TVAPP.cookieNotifier(criteria);
			notifyInstance.open( TVAPP.smDict('CookieNotifier.label.' + criteria ) );
		}
	}
})();

/* Modal Code (for simpler & smaller notification/confirmation modals) */
(function($){
	$.fn.modal = function(settings, data) {
		var config = {
			"text": TVAPP.smDict("Error.modal_msg_unspecified"),
			"modalHeight": 100,
			"modalLeft": '50%',
			"modalWidth": 340,
			"modalTop": (j$(window).height() / 2) - ((settings.modalHeight ? settings.modalHeight : 100) / 2) - 50,
			"onClose": function(){ },
			"btn_message": "<button type='button' class='jModalClose generic_btn' tabindex='0'><span class='btn_txt'>OK</span></button>"
		};
		if (settings) j$.extend(config, settings);
		// if modal is in facebook app context change some display options
		if (TVAPP.property.fb) j$.extend(config, {"modalTop": 300});

		// if modal is in TBE iframe change some display options
		if (TVAPP.property.tbe_iframe) j$.extend(config, {"modalTop": 220});

		this.each(function() {
			var overlay = j$("<div id='jNotifyOverlay' class='notify_overlay'></div>");

			j$(modal).data("overlay",overlay);

			var modal = j$("<div id='modal-window' class='notification'></div>").css({
				"position": "fixed",
				"left": config.modalLeft,
				"top": config.modalTop,
				"width": config.modalWidth,
				"margin-left": -1*config.modalWidth/2-6, // -6 for padding(in css)
				"z-index": 10001
			}).hide();
			var modal_inner = j$("<div class='notification_inner' role='alertdialog' aria-label='Alert message' aria-describedby='notification_text'></div>").appendTo(modal);
			j$("<div id='notification_text'></div>").html(config.text).appendTo(modal_inner);
			var button_holder = j$("<div class='modal_btn_holder'></div>").appendTo(modal_inner);
			var closeButton = j$(config.btn_message).appendTo(button_holder);

			modal.append('<div class="nu_modal_backdrop"></div>');

			var show = function() {
				j$("body").append(modal);
				j$(modal).fadeIn(700);
				if (j$.browser.msie) { overlay.appendTo("body").show(); } else { overlay.appendTo("body").fadeIn(500); }
				j$(closeButton).bind("click", close);
				closeButton[closeButton.length - 1].focus();
				document.addEventListener('keydown', handleKeys, false);
			};
			
			function handleKeys(e) {
				if (e.keyCode == 27) {
					close(e);
				} else if (e.keyCode == 9) {
					//Do not focus shift from 'Ok' button
					if(closeButton.get(0) === document.activeElement) {
						e.preventDefault();
					};
					setTimeout(function() {
						if (!j$.contains(modal[0], document.activeElement)) {
							closeButton[0].focus();
						}
					}, 0);
				}
			}

			var close = function(event) {
				event.preventDefault();
				document.removeEventListener('keydown', handleKeys, false);
				config.onClose();
				j$(modal).fadeOut(50, function() {
					j$(this).remove();
				});
				overlay.remove();
				if(typeof data != "undefined" && data.hasOwnProperty("action") && typeof data.action != "undefined"){
					j$(data.action).focus();
				}
			}

			// Show it immediately
			show();

		});

		return this;

	};

	var NATIVE_SUPPORT = !!("placeholder" in document.createElement( "input" ));
	$.fn.placeholder = function() {

		return NATIVE_SUPPORT ? this.each(function(){// For browsers that HAVE placeholder support
			var input = $(this);
			var ph_text = input.attr("placeholder");
			input
				.focus(function(){
					$(this).removeClass("placeholder");
				})
				.blur(function(){
					if ($(this).val()==""){
						$(this).addClass("placeholder");
					}
				})
			if (input.val()!="") {
				$(this).removeClass("placeholder");
			} else {
				$(this).addClass("placeholder");
			}
		}) : this.each(function() {// For browsers that DON'T have placeholder support
			var input = $(this);
			var ph_text = input.attr("placeholder");
			if (input.attr("type") == "text" || this.nodeName.toLowerCase() == "textarea") {
				input
					.addClass("placeholdable")
					.focus(function(){
						if ($(this).val()==ph_text || $(this).val()==""){
							$(this).val("").removeClass("placeholder");
						}
					})
					.blur(function(){
						if ($(this).val()==""){
							$(this).addClass("placeholder").val(ph_text);
						}
					})
				if (input.val()!="") {
					$(this).removeClass("placeholder");
				} else {
					$(this).addClass("placeholder").val(ph_text);
				}
			} else if (input.attr("type") == "password" && input.attr("placeholder")) {
				input
					.addClass("placeholdable").hide()
					.blur(function(){
						if ($(this).val()==""){
							input.hide();
							$(input).prev(".fakePwText:first").show();
						}

					});
				$('<input type="text" class="fakePwText placeholder inputtypetext" />').insertBefore(input).val("Password")
					.focus(function(){
						$(this).hide();
						input.show().focus().removeClass("placeholder");
					})
			}
		});
	}
	var handleFormSubmission = function(e, data) {
		$(".placeholdable", data.form).each(function() {
			if ($(this).val() == $(this).attr("placeholder")) {$(this).val("")}
		});
	};
	$(document).bind("formSubmitted", handleFormSubmission);

	$.fn.fontfit = function(max) {
		var max_size = 18;
		if (typeof(max) == "undefined")
			max = max_size;
		$(this).wrapInner('<div id="fontfit"></div>');
		var dheight = $(this).height();
		var cheight = $("#fontfit").height();
		var fsize = (($(this).css("font-size")).slice(0,-2))*1;
		while(cheight<dheight && fsize<max) {
			fsize+=1;
			$(this).css("font-size",fsize+"px");
			cheight = $("#fontfit").height();
		}
		while(cheight>dheight || fsize>max) {
			fsize-=1;
			$(this).css("font-size",fsize+"px");
			cheight = $("#fontfit").height();
		}
		$("#fontfit").replaceWith($("#fontfit").html());
		return this;
	}

	$.fn.serializeObject = function()
	{
		var o = {};
		var a = this.serializeArray();
		$.each(a, function() {
			if (o[this.name]) {
				if (!o[this.name].push) {
					o[this.name] = [o[this.name]];
				}
				o[this.name].push(this.value || '');
			} else {
				o[this.name] = this.value || '';
			}
		});
		return o;
	};

	$.fn.cooltip = function(data) {

		//j$(this).css("cursor","default");

		j$(this)
			.mouseenter(function(event){
				j$("body").append("<div class='filter_tool_tip jToolTipHolder'>"+ data +"</div>");

				//j$(".filter_tool_tip").width((data.length*.5)+"em");
				j$(".jToolTipHolder").append("<div class='nub'></div>");

				j$(".jToolTipHolder")
					.css("top",(j$(this).offset().top - (j$(".jToolTipHolder").outerHeight() + 15) ))
					.css("left",(j$(this).offset().left - (j$(".jToolTipHolder").outerWidth() / 2) + (j$(this).outerWidth() / 2) ))
					.fadeIn(300);
			})
			.mouseleave(function(){
				j$(".jToolTipHolder").remove();
			});
	};

})(jQuery);

//fgnass.github.com/spin.js#v1.2.5
(function(a,b,c){function g(a,c){var d=b.createElement(a||"div"),e;for(e in c)d[e]=c[e];return d}function h(a){for(var b=1,c=arguments.length;b<c;b++)a.appendChild(arguments[b]);return a}function j(a,b,c,d){var g=["opacity",b,~~(a*100),c,d].join("-"),h=.01+c/d*100,j=Math.max(1-(1-a)/b*(100-h),a),k=f.substring(0,f.indexOf("Animation")).toLowerCase(),l=k&&"-"+k+"-"||"";return e[g]||(i.insertRule("@"+l+"keyframes "+g+"{"+"0%{opacity:"+j+"}"+h+"%{opacity:"+a+"}"+(h+.01)+"%{opacity:1}"+(h+b)%100+"%{opacity:"+a+"}"+"100%{opacity:"+j+"}"+"}",0),e[g]=1),g}function k(a,b){var e=a.style,f,g;if(e[b]!==c)return b;b=b.charAt(0).toUpperCase()+b.slice(1);for(g=0;g<d.length;g++){f=d[g]+b;if(e[f]!==c)return f}}function l(a,b){for(var c in b)a.style[k(a,c)||c]=b[c];return a}function m(a){for(var b=1;b<arguments.length;b++){var d=arguments[b];for(var e in d)a[e]===c&&(a[e]=d[e])}return a}function n(a){var b={x:a.offsetLeft,y:a.offsetTop};while(a=a.offsetParent)b.x+=a.offsetLeft,b.y+=a.offsetTop;return b}var d=["webkit","Moz","ms","O"],e={},f,i=function(){var a=g("style");return h(b.getElementsByTagName("head")[0],a),a.sheet||a.styleSheet}(),o={lines:12,length:7,width:5,radius:10,rotate:0,color:"#000",speed:1,trail:100,opacity:.25,fps:20,zIndex:2e9,className:"spinner",top:"auto",left:"auto"},p=function q(a){if(!this.spin)return new q(a);this.opts=m(a||{},q.defaults,o)};p.defaults={},m(p.prototype,{spin:function(a){this.stop();var b=this,c=b.opts,d=b.el=l(g(0,{className:c.className}),{position:"relative",zIndex:c.zIndex}),e=c.radius+c.length+c.width,h,i;a&&(a.insertBefore(d,a.firstChild||null),i=n(a),h=n(d),l(d,{left:(c.left=="auto"?i.x-h.x+(a.offsetWidth>>1):c.left+e)+"px",top:(c.top=="auto"?i.y-h.y+(a.offsetHeight>>1):c.top+e)+"px"})),d.setAttribute("aria-role","progressbar"),b.lines(d,b.opts);if(!f){var j=0,k=c.fps,m=k/c.speed,o=(1-c.opacity)/(m*c.trail/100),p=m/c.lines;!function q(){j++;for(var a=c.lines;a;a--){var e=Math.max(1-(j+a*p)%m*o,c.opacity);b.opacity(d,c.lines-a,e,c)}b.timeout=b.el&&setTimeout(q,~~(1e3/k))}()}return b},stop:function(){var a=this.el;return a&&(clearTimeout(this.timeout),a.parentNode&&a.parentNode.removeChild(a),this.el=c),this},lines:function(a,b){function e(a,d){return l(g(),{position:"absolute",width:b.length+b.width+"px",height:b.width+"px",background:a,boxShadow:d,transformOrigin:"left",transform:"rotate("+~~(360/b.lines*c+b.rotate)+"deg) translate("+b.radius+"px"+",0)",borderRadius:(b.width>>1)+"px"})}var c=0,d;for(;c<b.lines;c++)d=l(g(),{position:"absolute",top:1+~(b.width/2)+"px",transform:b.hwaccel?"translate3d(0,0,0)":"",opacity:b.opacity,animation:f&&j(b.opacity,b.trail,c,b.lines)+" "+1/b.speed+"s linear infinite"}),b.shadow&&h(d,l(e("#000","0 0 4px #000"),{top:"2px"})),h(a,h(d,e(b.color,"0 0 1px rgba(0,0,0,.1)")));return a},opacity:function(a,b,c){b<a.childNodes.length&&(a.childNodes[b].style.opacity=c)}}),!function(){function a(a,b){return g("<"+a+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',b)}var b=l(g("group"),{behavior:"url(#default#VML)"});!k(b,"transform")&&b.adj?(i.addRule(".spin-vml","behavior:url(#default#VML)"),p.prototype.lines=function(b,c){function f(){return l(a("group",{coordsize:e+" "+e,coordorigin:-d+" "+ -d}),{width:e,height:e})}function k(b,e,g){h(i,h(l(f(),{rotation:360/c.lines*b+"deg",left:~~e}),h(l(a("roundrect",{arcsize:1}),{width:d,height:c.width,left:c.radius,top:-c.width>>1,filter:g}),a("fill",{color:c.color,opacity:c.opacity}),a("stroke",{opacity:0}))))}var d=c.length+c.width,e=2*d,g=-(c.width+c.length)*2+"px",i=l(f(),{position:"absolute",top:g,left:g}),j;if(c.shadow)for(j=1;j<=c.lines;j++)k(j,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(j=1;j<=c.lines;j++)k(j);return h(b,i)},p.prototype.opacity=function(a,b,c,d){var e=a.firstChild;d=d.shadow&&d.lines||0,e&&b+d<e.childNodes.length&&(e=e.childNodes[b+d],e=e&&e.firstChild,e=e&&e.firstChild,e&&(e.opacity=c))}):f=k(b,"animation")}(),a.Spinner=p})(window,document);
(function($){

	$.fn.spin = function(opts) {
		this.each(function() {
			var $this = $(this),
				data = $this.data();

			if (data.spinner) {
				data.spinner.stop();
				delete data.spinner;
			}
			if (opts !== false) {
				data.spinner = new Spinner($.extend({color: $this.css('color')}, {
					lines: 8, // The number of lines to draw
					length: 2, // The length of each line
					width: 3, // The line thickness
					radius: 6, // The radius of the inner circle
					speed: 1, // Rounds per second
					trail: 60, // Afterglow percentage
					shadow: false // Whether to render a shadow
				}, opts)).spin(this);
			}
		});
		return this;
	};

	$.fn.valList = function(){
		return $.map( this, function (elem) {
			return elem.value || "";
		}).join( "," );
	};

})(jQuery);

(function($){


	
	function isCsrfSafeMethod(method) {
		// these HTTP methods do not require CSRF protection
		var result = (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method)) || (/^(get|head|options|trace)$/.test(method));
		return result;
	}
	
	function okToCallSetBrowserLocale(){
		var criteria = TVAPP.property.site_cookie_acceptance;
		switch(criteria) {


		case 'modal': 
			if( !(TVAPP.readCookie('Cookie-Accept') && TVAPP.readCookie('Cookie-Accept').split('|').indexOf(TVAPP.property.site.id) != -1) ) {
				return false;
			}
		break;
		default: {
			// this is for banner and None type mode
			j$.log('Cookie Acceptance feature not enabled, Hence continue to setBrowser Locale');
			}
	   }
		
		return true;
	}

		j$.ajaxSetup({
			beforeSend : function(jqXHR, settings) {
					  	if (!isCsrfSafeMethod(settings.type) && !this.crossDomain) {
					  	jqXHR.setRequestHeader('tss-token', j$('#tsstoken').val());
					  	 }
						}
		});
		
		if(okToCallSetBrowserLocale()){
			setBrowserLocale();
		}
		

	function setBrowserLocale() {
		//once file loads, fetch browser code - covering bases for multiple browser types
		// If IE, set flag to 1
		
		if ((navigator.userAgent.indexOf('MSIE') > 0) || !!(navigator.userAgent.match(/Trident.*rv\:11\./))){
			var browserLanguage = navigator.browserLanguage.toLowerCase();
			var flag = 1;
		}
		else{
			var browserLanguage = (navigator.language).toLowerCase();
			var flag = 0;
		}
		j$.log('The browser language is '+browserLanguage);
		j$.ajax({
			url: '/ajax/action/process-browser-locale?browser_locale='+browserLanguage+'&browser_language_from_server='+flag,
			type: 'GET',
			dataType: 'json',
			success: function(result){
				if(result.Status === 'OK'){
					j$.log('Site language is set to '+browserLanguage);
					if (result.UserMessage == 'refresh') {
						// If browserLanguage is not the same as sessionLocale, will need to refresh
						j$.log('Refresh required to show browser language.');
						window.location.reload();
					}
				}
			},
			error: function(){
				j$.log('Could not set the site language.');
			}
		});
	}
})(jQuery);

(function($){
	// Aria - label handling for chosen dropdowns
	TVAPP.chosenPostProcessor(j$('.jChosen'));
})(jQuery);

(function(j$){
	// sessionTimeout function
	var msg = TVAPP.smDict("Session.Timeout.Message.label");
	msg = msg.replace('{0}', Math.round((TVAPP.property.session_inactive_interval - TVAPP.property.session_remainder_interval)/60));
	msg = msg.replace('{1}', Math.round((TVAPP.property.session_inactive_interval - TVAPP.property.session_remainder_interval)/60));
	TVAPP.sessionTimeout = function(options) {
		var defaults = {
			message: msg,
			logoutUrl: '/logout',
			warningPeriod: TVAPP.property.session_remainder_interval,
			logoutPeriod: TVAPP.property.session_inactive_interval
		}, o, warningCounter, logoutCounter, logoutTimer;
		
		o = options ? j$.extend(defaults, options): defaults;


        function controlWarningCounter(action){
        	switch (action) {
        		case 'start': {
        			warningCounter = setTimeout(function(){
        				//open modal
        				j$("body").modal({
        					"text": o.message,
        					"modalWidth": 550,
        					"onClose": function(){
        						clearTimeout(warningCounter);
        		                //clearTimeout(logoutCounter);
        		                clearInterval(logoutTimer)
        		                controlWarningCounter('start');
        					}
        				});
        				        				
        				var warningPeriod = (o.logoutPeriod - o.warningPeriod) * 1000;
        				var timeStamp = new Date();
        				
        				
        				//update Counter
        				logoutTimer = setInterval(function(){
        					var timelapsed = new Date() - timeStamp;
        					var timeLeft = warningPeriod -  timelapsed;
        					
        					if(timeLeft/1000 > 60) {
        						j$('#sessionCoutdown').text(new Number(timeLeft/(60*1000)).toFixed(0) + ' minutes');
        					} else {
        						j$('#sessionCoutdown').text(new Number(timeLeft/1000).toFixed(0) + ' seconds');
        					}
        					if(timeLeft/1000 <= 1) {
         					   TVAPP.modal.close(true);	
      						   clearInterval(logoutTimer);
      						   logout();
      						}
        				}, 1000 );
        				
        			}, o.warningPeriod * 1000);
        		}
        	}
        }
        
        function logout(){
        	// call redirect url
        	window.location = o.logoutUrl;
        }
        //show sso timeout modal for logged(likely) in users only
        //if (TVAPP.user.getIsGuest() == 'false' || TVAPP.user.likelyUser.getIsGuest() == 'false'){
        if (TVAPP.property.user_info.is_guest == 'false' || TVAPP.user.likelyUser.getIsGuest() == 'false'){
        	controlWarningCounter('start');
        }
        
	};

	/*TVAPP.sessionTimeout({
		message: msg,
		logoutUrl: '/logout',
		warningPeriod: TVAPP.property.session_remainder_interval,
		logoutPeriod: TVAPP.property.session_inactive_interval
	});*/

})(jQuery)
